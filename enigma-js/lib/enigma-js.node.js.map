{"version":3,"sources":["webpack://enigma-js/webpack/universalModuleDefinition","webpack://enigma-js/webpack/bootstrap","webpack://enigma-js/./src/Admin.js","webpack://enigma-js/./src/Enigma.js","webpack://enigma-js/./src/emitterConstants.js","webpack://enigma-js/./src/enigma-utils.js","webpack://enigma-js/./src/index.js","webpack://enigma-js/./src/models/Task.js","webpack://enigma-js/external \"axios\"","webpack://enigma-js/external \"buffer\"","webpack://enigma-js/external \"core-js/stable\"","webpack://enigma-js/external \"elliptic\"","webpack://enigma-js/external \"eth-crypto\"","webpack://enigma-js/external \"ethereumjs-abi\"","webpack://enigma-js/external \"eventemitter3\"","webpack://enigma-js/external \"jayson/lib/client/browser\"","webpack://enigma-js/external \"jsbi\"","webpack://enigma-js/external \"node-forge\"","webpack://enigma-js/external \"regenerator-runtime/runtime\"","webpack://enigma-js/external \"web3-utils\"","webpack://enigma-js/external \"zlib\""],"names":["Admin","web3","enigmaContract","tokenContract","txDefaults","enigma","sigAddr","methods","getWorkerFromSigningAddress","call","result","account","status","parseInt","report","balance","logs","getWorker","worker","scAddr","getSecretContract","countSecretContracts","start","stop","getSecretContractAddresses","getAllSecretContractAddresses","codeHash","stateDeltaHashes","length","index","slice","stateDeltaHash","includes","emitter","EventEmitter","login","send","from","on","hash","emit","eeConstants","confirmationNumber","receipt","message","logout","amount","balanceOf","msg","name","approve","options","address","deposit","withdraw","signer","Enigma","enigmaContractAddr","tokenContractAddr","rpcAddr","callServer","request","callback","config","headers","axios","post","JSON","parse","then","response","data","error","text","stringify","err","code","client","jaysonBrowserClient","workerParamsCache","selectedWorkerGroupCache","taskKeyLocalStorage","createContracts","admin","eth","Contract","EnigmaContract","EnigmaTokenContract","fn","args","gasLimit","gasPx","sender","scAddrOrPreCode","isContractDeploymentTask","getUserTaskDeployments","nonce","utils","generateScAddr","Buffer","isBuffer","preCode","gzip","preCodeGzip","Error","preCodeHash","soliditySha3","t","value","toString","argsTranspose","undefined","map","col","i","row","abiEncodedArgs","remove0x","abi","encodeParameters","abiEncodedArgsArray","n","push","substr","getBlockNumber","blockNumber","getWorkerParams","workerParams","firstBlockNumber","selectWorkerGroup","workerAddress","toLowerCase","obtainTaskKeyPair","publicKey","privateKey","Promise","resolve","reject","userPubKey","getWorkerEncryptionKeyResult","id","workerEncryptionKey","workerSig","hexToVerify","recAddress","EthCrypto","recover","console","derivedKey","getDerivedKey","encryptedFn","encryptMessage","encryptedAbiEncodedArgs","v","sign","userTaskSig","Task","task","createDeploymentTaskRecord","inputsHash","transactionHash","createTaskRecord","taskId","events","TaskRecordCreated","returnValues","ethStatus","creationBlockNumber","tasks","inputsHashes","gasLimits","gasPxs","fees","totalFees","reduce","a","b","createTaskRecords","taskIds","TaskRecordsCreated","getTaskRecord","proof","outputHash","custodian","getReport","Object","keys","epochSize","getEpochSize","getWorkerParamsResult","seed","JSBI","BigInt","workers","stakes","x","params","workerGroupSize","tokenCpt","add","selectedWorkers","web3Utils","keccak256","randVal","remainder","selectedWorker","subtract","rpcEndpointName","emitName","serializeTask","getTaskResultResult","delta","ethereumPayload","ethereumAddress","encryptedAbiEncodedOutputs","output","usedGas","workerTaskSig","signature","engStatus","decryptedOutput","decryptMessage","withResult","generator","p","next","d","innerPollTaskStatus","pollTaskStatusGen","interval","getTaskRecordStatus","sleep","isBrowser","window","encodedPrivateKey","localStorage","getItem","random","forge","createInstance","seedFileSync","needed","util","fillString","bytesToHex","getBytes","setItem","btoa","atob","publicKeyByPrivateKey","maxRetries","retryCount","createTask","scTask","sendTaskInput","encryptedArgs","userDHKey","contractAddress","ERROR","DEPOSIT_TRANSACTION_HASH","DEPOSIT_CONFIRMATION","DEPOSIT_RECEIPT","WITHDRAW_TRANSACTION_HASH","WITHDRAW_CONFIRMATION","WITHDRAW_RECEIPT","LOGIN_TRANSACTION_HASH","LOGIN_CONFIRMATION","LOGIN_RECEIPT","LOGOUT_TRANSACTION_HASH","LOGOUT_CONFIRMATION","LOGOUT_RECEIPT","DEPLOY_SC_ADDR_RESULT","DEPLOY_SC_ETH_TRANSACTION_HASH","DEPLOY_SC_ETH_CONFIRMATION","DEPLOY_SC_ETH_RECEIPT","DEPLOY_SC_ENG_RECEIPT","CREATE_TASK","CREATE_TASK_INPUT","CREATE_TASK_RECORD_TRANSACTION_HASH","CREATE_TASK_RECORD_CONFIRMATION","CREATE_TASK_RECORD_RECEIPT","CREATE_TASK_RECORD","CREATE_TASK_RECORDS_TRANSACTION_HASH","CREATE_TASK_RECORDS_CONFIRMATION","CREATE_TASK_RECORDS_RECEIPT","CREATE_TASK_RECORDS","SEND_TASK_INPUT_RESULT","POLL_TASK_STATUS_RESULT","GET_TASK_RESULT_RESULT","DEPLOY_SECRET_CONTRACT_RESULT","POLL_TASK_ETH_RESULT","usePureJavaScript","EC","elliptic","ec","appendMessages","hexStr","inputsArray","input","padStart","appendArrayMessages","array","principalHash","workerAddresses","workerStakes","commitReceiptsHash","lastStateDeltaHash","outputHashes","gasesUsed","optionalEthereumData","optionalEthereumContractAddress","successFlag","enclavePublicKey","clientPrivateKey","clientKey","keyFromPrivate","enclaveKey","keyFromPublic","sharedPoints","getPublic","mul","getPrivate","y","getY","isOdd","getX","yBuffer","xBuffer","toArrayLike","sha256","md","create","update","digest","toHex","keyHex","msgHex","key","hexToBytes","msgBuf","iv","createBuffer","tag","decipher","cipher","createDecipher","finish","getBytesSync","createCipher","putBuffer","mode","putBytes","toGrains","engValue","hexString","substring","hexToAscii","replace","stack","isNaN","String","fromCharCode","join","ms","setTimeout","buffer","zlib","gunzip","test","msgId"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AAEA;;;;IAGqBA,K;;;AACnB;;;;;;;;AAQA,iBAAYC,IAAZ,EAAkBC,cAAlB,EAAkCC,aAAlC,EAAiDC,UAAjD,EAA6DC,MAA7D,EAAqE;AAAA;;AACnE,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;AAED;;;;;;;;;;;;;+CAM2BC,O;;;;;;;uBACJ,KAAKJ,cAAL,CAAoBK,OAApB,CAA4BC,2BAA5B,CAAwDF,OAAxD,EAAiEG,IAAjE,E;;;AAAfC,sB;iDACC;AACLC,yBAAO,EAAED,MAAM,CAAC,CAAD,CADV;AAELE,wBAAM,EAAEC,QAAQ,CAACH,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAD,CAFX;AAGLI,wBAAM,EAAEJ,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAHH;AAILK,yBAAO,EAAEF,QAAQ,CAACH,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAD,CAJZ;AAKLM,sBAAI,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV;AALD,iB;;;;;;;;;;;;;;;;AAST;;;;;;;;;;;;gDAMsBC,O;;;;;;;uBACC,KAAKT,cAAL,CAAoBK,OAApB,CAA4BU,SAA5B,CAAsCN,OAAtC,EAA+CF,IAA/C,E;;;AAAfS,sB;kDACCL,QAAQ,CAACK,MAAM,CAACN,MAAR,C;;;;;;;;;;;;;;;;AAGjB;;;;;;;;;;;;gDAMiBO,M;;;;;+BACRN,Q;;uBAAgB,KAAKX,cAAL,CAAoBK,OAApB,CAA4Ba,iBAA5B,CAA8CD,MAA9C,EAAsDV,IAAtD,E;;;8CAA8DG,M;;mEAAY,C;;;;;;;;;;;;;;;;AAGnG;;;;;;;;;;;;;;;;+BAMSC,Q;;uBAAe,KAAKX,cAAL,CAAoBK,OAApB,CAA4Bc,oBAA5B,GAAmDZ,IAAnD,E;;;;;;;;;;;;;;;;;;;;AAGxB;;;;;;;;;;;;;gDAOiCa,K,EAAOC,I;;;;;;uBACxB,KAAKrB,cAAL,CAAoBK,OAApB,CAA4BiB,0BAA5B,CAAuDF,KAAvD,EAA8DC,IAA9D,EAAoEd,IAApE,E;;;;;;;;;;;;;;;;;;;AAGhB;;;;;;;;;;;;;;;;;uBAMgB,KAAKP,cAAL,CAAoBK,OAApB,CAA4BkB,6BAA5B,GAA4DhB,IAA5D,E;;;;;;;;;;;;;;;;;;;AAGhB;;;;;;;;;;;;gDAMkBU,M;;;;;;uBACF,KAAKjB,cAAL,CAAoBK,OAApB,CAA4Ba,iBAA5B,CAA8CD,MAA9C,EAAsDV,IAAtD,E;;;iEAA8DiB,Q;;;;;;;;;;;;;;;;AAG9E;;;;;;;;;;;;gDAMuBP,M;;;;;;uBACP,KAAKjB,cAAL,CAAoBK,OAApB,CAA4Ba,iBAA5B,CAA8CD,MAA9C,EAAsDV,IAAtD,E;;;iEAA8DkB,gB,CAAiBC,M;;;;;;;;;;;;;;;;AAG/F;;;;;;;;;;;;;gDAOwBT,M,EAAQU,K;;;;;;uBAChB,KAAK3B,cAAL,CAAoBK,OAApB,CAA4Ba,iBAA5B,CAA8CD,MAA9C,EAAsDV,IAAtD,E;;;+BAA+EoB,K;iEAAjBF,gB;;;;;;;;;;;;;;;;AAG9E;;;;;;;;;;;;;;iDAQ0BR,M,EAAQG,K,EAAOC,I;;;;;;uBACzB,KAAKrB,cAAL,CAAoBK,OAApB,CAA4Ba,iBAA5B,CAA8CD,MAA9C,EAAsDV,IAAtD,E;;;gCAAqFa,K;gCAAOC,I;mEAA9BI,gB,CAAiBG,K;;;;;;;;;;;;;;;;AAG/F;;;;;;;;;;;;;iDAOuBX,M,EAAQY,c;;;;;;uBACf,KAAK7B,cAAL,CAAoBK,OAApB,CAA4Ba,iBAA5B,CAA8CD,MAA9C,EAAsDV,IAAtD,E;;;gCACZsB,c;mEAD0EJ,gB,CAAiBK,Q;;;;;;;;;;;;;;;;AAI/F;;;;;;;;;0BAMMrB,O,EAAS;AAAA;;AACb,UAAIsB,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAES,KAAI,CAAChC,cAAL,CAAoBK,OAApB,CAA4B4B,KAA5B,GAAoCC,IAApC,CAAyC;AAACC,sBAAI,EAAE1B;AAAP,iBAAzC,EAA0D2B,EAA1D,CAA6D,iBAA7D,EAAgF,UAACC,IAAD,EAAU;AAC9FN,yBAAO,CAACO,IAAR,CAAaC,wEAAb,EAAiDF,IAAjD;AACD,iBAFK,EAEHD,EAFG,CAEA,cAFA,EAEgB,UAACI,kBAAD,EAAqBC,OAArB,EAAiC;AACrDV,yBAAO,CAACO,IAAR,CAAaC,oEAAb,EAA6CC,kBAA7C,EAAiEC,OAAjE;AACD,iBAJK,EAIHL,EAJG,CAIA,SAJA,EAIW,UAACK,OAAD,EAAa;AAC5BV,yBAAO,CAACO,IAAR,CAAaC,+DAAb,EAAwCE,OAAxC;AACD,iBANK,CAFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUGV,uBAAO,CAACO,IAAR,CAAaC,uDAAb,EAAgC,cAAIG,OAApC;;AAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAaA,aAAOX,OAAP;AACD;AAED;;;;;;;;;2BAMOtB,O,EAAS;AAAA;;AACd,UAAIsB,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAES,MAAI,CAAChC,cAAL,CAAoBK,OAApB,CAA4BsC,MAA5B,GAAqCT,IAArC,CAA0C;AAACC,sBAAI,EAAE1B;AAAP,iBAA1C,EAA2D2B,EAA3D,CAA8D,iBAA9D,EAAiF,UAACC,IAAD,EAAU;AAC/FN,yBAAO,CAACO,IAAR,CAAaC,yEAAb,EAAkDF,IAAlD;AACD,iBAFK,EAEHD,EAFG,CAEA,cAFA,EAEgB,UAACI,kBAAD,EAAqBC,OAArB,EAAiC;AACrDV,yBAAO,CAACO,IAAR,CAAaC,qEAAb,EAA8CC,kBAA9C,EAAkEC,OAAlE;AACD,iBAJK,EAIHL,EAJG,CAIA,SAJA,EAIW,UAACK,OAAD,EAAa;AAC5BV,yBAAO,CAACO,IAAR,CAAaC,gEAAb,EAAyCE,OAAzC;AACD,iBANK,CAFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUGV,uBAAO,CAACO,IAAR,CAAaC,uDAAb,EAAgC,cAAIG,OAApC;;AAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAaA,aAAOX,OAAP;AACD;AAED;;;;;;;;;;4BAOQtB,O,EAASmC,M,EAAQ;AAAA;;AACvB,UAAIb,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuB,MAAI,CAAC/B,aAAL,CAAmBI,OAAnB,CAA2BwC,SAA3B,CAAqCpC,OAArC,EAA8CF,IAA9C,EADvB;;AAAA;AACOM,uBADP;;AAAA,sBAEKA,OAAO,GAAG+B,MAFf;AAAA;AAAA;AAAA;;AAGSE,mBAHT,GAGe,6BAHf;AAIGf,uBAAO,CAACO,IAAR,CAAa,OAAb,EAAsB;AACpBS,sBAAI,EAAE,iBADc;AAEpBL,yBAAO,EAAEI;AAFW,iBAAtB;AAJH;;AAAA;AAAA;AAAA,uBAUO,MAAI,CAAC7C,aAAL,CAAmBI,OAAnB,CAA2B2C,OAA3B,CAAmC,MAAI,CAAChD,cAAL,CAAoBiD,OAApB,CAA4BC,OAA/D,EAAwEN,MAAxE,EAAgFV,IAAhF,CAAqF;AAACC,sBAAI,EAAE1B;AAAP,iBAArF,CAVP;;AAAA;AAAA;AAAA;AAAA,uBAYyB,MAAI,CAACT,cAAL,CAAoBK,OAApB,CAA4B8C,OAA5B,CAAoC1C,OAApC,EAA6CmC,MAA7C,EACpBV,IADoB,CACf;AAACC,sBAAI,EAAE1B;AAAP,iBADe,EAEpB2B,EAFoB,CAEjB,iBAFiB,EAEE,UAACC,IAAD,EAAU;AAC9BN,yBAAO,CAACO,IAAR,CAAaC,0EAAb,EAAmDF,IAAnD;AACD,iBAJmB,EAKpBD,EALoB,CAKjB,cALiB,EAKD,UAACI,kBAAD,EAAqBC,OAArB,EAAiC;AAClDV,yBAAO,CAACO,IAAR,CAAaC,sEAAb,EAA+CC,kBAA/C,EAAmEC,OAAnE;AACD,iBAPmB,CAZzB;;AAAA;AAYSA,uBAZT;AAoBGV,uBAAO,CAACO,IAAR,CAAaC,iEAAb,EAA0CE,OAA1C;AApBH;AAAA;;AAAA;AAAA;AAAA;AAsBGV,uBAAO,CAACO,IAAR,CAAaC,uDAAb,EAAgC,cAAIG,OAApC;;AAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAyBA,aAAOX,OAAP;AACD;AAED;;;;;;;;;;;6BAQStB,O,EAASmC,M,EAAQ;AAAA;;AACxB,UAAIb,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAES,MAAI,CAAChC,cAAL,CAAoBK,OAApB,CAA4B+C,QAA5B,CAAqCR,MAArC,EACJV,IADI,CACC;AAACC,sBAAI,EAAE1B;AAAP,iBADD,EAEJ2B,EAFI,CAED,iBAFC,EAEkB,UAACC,IAAD,EAAU;AAC9BN,yBAAO,CAACO,IAAR,CAAaC,2EAAb,EAAoDF,IAApD;AACD,iBAJG,EAKJD,EALI,CAKD,cALC,EAKe,UAACI,kBAAD,EAAqBC,OAArB,EAAiC;AAClDV,yBAAO,CAACO,IAAR,CAAaC,uEAAb,EAAgDC,kBAAhD,EAAoEC,OAApE;AACD,iBAPG,EAQJL,EARI,CAQD,SARC,EAQU,UAACK,OAAD,EAAa;AACzBV,yBAAO,CAACO,IAAR,CAAaC,kEAAb,EAA2CE,OAA3C;AACD,iBAVG,CAFT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcGV,uBAAO,CAACO,IAAR,CAAaC,uDAAb,EAAgC,cAAIG,OAApC;;AAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAiBA,aAAOX,OAAP;AACD;AAED;;;;;;;;;;;;iDAMiBtB,O;;;;;gCACRE,Q;;uBAAgB,KAAKX,cAAL,CAAoBK,OAApB,CAA4BU,SAA5B,CAAsCN,OAAtC,EAA+CF,IAA/C,E;;;gDAAuDM,O;;;;;;;;;;;;;;;;;AAGhF;;;;;;;;;;;;iDAM0BJ,O;;;;;;uBACV,KAAKT,cAAL,CAAoBK,OAApB,CAA4BU,SAA5B,CAAsCN,OAAtC,EAA+CF,IAA/C,E;;;mEAAuD8C,M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrRzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;IAGqBC,M;;;AACnB;;;;;;;;;;AAUA,kBAAYvD,IAAZ,EAAkBwD,kBAAlB,EAAsCC,iBAAtC,EAAyDC,OAAzD,EAAmF;AAAA,QAAjBvD,UAAiB,uEAAJ,EAAI;;AAAA;;AACjF,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKG,UAAL,GAAkBA,UAAlB,CAFiF,CAGjF;;AACA,QAAIwD,UAAU,GAAG,SAAbA,UAAa,CAASC,OAAT,EAAkBC,QAAlB,EAA4B;AAC3C,UAAIC,MAAM,GAAG;AACXC,eAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,yBAAe;AAFR;AADE,OAAb;AAMAC,kDAAK,CAACC,IAAN,CAAWP,OAAX,EAAoBQ,IAAI,CAACC,KAAL,CAAWP,OAAX,CAApB,EAAyCE,MAAzC,EAAiDM,IAAjD,CAAsD,UAACC,QAAD,EAAc;AAClE,YAAI7B,wDAAA,IAAqB6B,QAAQ,CAACC,IAAlC,EAAwC;AACtCT,kBAAQ,CAACQ,QAAQ,CAACC,IAAT,CAAcC,KAAf,EAAsB,IAAtB,CAAR;AACD,SAFD,MAEO;AACL,cAAIC,IAAI,GAAGN,IAAI,CAACO,SAAL,CAAeJ,QAAQ,CAACC,IAAT,CAAc7D,MAA7B,CAAX;AACAoD,kBAAQ,CAAC,IAAD,EAAOW,IAAP,CAAR;AACD;AACF,OAPD,WAOS,UAASE,GAAT,EAAc;AACrBb,gBAAQ,CAAC;AAACc,cAAI,EAAE,CAAC,KAAR;AAAehC,iBAAO,EAAE+B,GAAG,CAAC/B;AAA5B,SAAD,EAAuC,IAAvC,CAAR;AACD,OATD;AAUD,KAjBD;;AAkBA,SAAKiC,MAAL,GAAcC,gEAAmB,CAAClB,UAAD,EAAa,EAAb,CAAjC;AACA,SAAKmB,iBAAL,GAAyB,EAAzB;AACA,SAAKC,wBAAL,GAAgC,EAAhC;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKC,eAAL,CAAqBzB,kBAArB,EAAyCC,iBAAzC;AACD;AAED;;;;;;;4BAGQ;AACN,WAAKyB,KAAL,GAAa,IAAInF,8CAAJ,CAAU,KAAKC,IAAf,EAAqB,KAAKC,cAA1B,EAA0C,KAAKC,aAA/C,EAA8D,KAAKC,UAAnE,EAA+E,IAA/E,CAAb;AACD;AAED;;;;;;;;;oCAMgBqD,kB,EAAoBC,iB,EAAmB;AACrD,WAAKxD,cAAL,GAAsB,IAAI,KAAKD,IAAL,CAAUmF,GAAV,CAAcC,QAAlB,CAA2BC,oDAAc,CAAC,KAAD,CAAzC,EACpB7B,kBADoB,EACA,KAAKrD,UADL,CAAtB;AAEA,WAAKD,aAAL,GAAqB,IAAI,KAAKF,IAAL,CAAUmF,GAAV,CAAcC,QAAlB,CAA2BE,yDAAmB,CAAC,KAAD,CAA9C,EACnB7B,iBADmB,EACA,KAAKtD,UADL,CAArB;AAED;AAED;;;;;;;;;;;;;;;;;+BAcWoF,E,EAAIC,I,EAAMC,Q,EAAUC,K,EAAOC,M,EAAQC,e,EAAiBC,wB,EAA0B;AAAA;;AACvF,UAAI7D,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEerB,QAFf;AAAA;AAAA,uBAE8B,KAAI,CAACX,cAAL,CAAoBK,OAApB,CAA4BwF,sBAA5B,CAAmDH,MAAnD,EAA2DnF,IAA3D,EAF9B;;AAAA;AAAA;AAEOuF,qBAFP;AAGO7E,sBAHP,GAGgB2E,wBAAwB,GAAGG,qDAAK,CAACC,cAAN,CAAqBN,MAArB,EAA6BI,KAA7B,CAAH,GAAyCH,eAHjF;;AAAA,qBAMKC,wBANL;AAAA;AAAA;AAAA;;AAAA,qBAOOK,MAAM,CAACC,QAAP,CAAgBP,eAAhB,CAPP;AAAA;AAAA;AAAA;;AAQKQ,uBAAO,GAAGR,eAAV,CARL,CASK;;AATL;AAAA,uBAUyBI,qDAAK,CAACK,IAAN,CAAWD,OAAX,CAVzB;;AAAA;AAUKE,2BAVL;AAAA;AAAA;;AAAA;AAAA,sBAYWC,KAAK,CAAC,0DAAuDX,eAAvD,CAAD,CAZhB;;AAAA;AAAA;AAAA;;AAAA;AAeGQ,uBAAO,GAAG,EAAV;AACAE,2BAAW,GAAG,EAAd;;AAhBH;AAmBOE,2BAnBP,GAmBqBX,wBAAwB,GAC1C,KAAI,CAAC7F,IAAL,CAAUgG,KAAV,CAAgBS,YAAhB,CAA6B;AAACC,mBAAC,EAAE,OAAJ;AAAaC,uBAAK,EAAEP,OAAO,CAACQ,QAAR,CAAiB,KAAjB;AAApB,iBAA7B,CAD0C,GACmC,EApBhF;AAqBOC,6BArBP,GAqBwBrB,IAAI,KAAKsB,SAAT,IAAsBtB,IAAI,CAAC7D,MAAL,KAAgB,CAAvC,GAA4C,CAAC,EAAD,EAAK,EAAL,CAA5C,GACpB6D,IAAI,CAAC,CAAD,CAAJ,CAAQuB,GAAR,CAAY,UAACC,GAAD,EAAMC,CAAN;AAAA,yBAAYzB,IAAI,CAACuB,GAAL,CAAS,UAACG,GAAD;AAAA,2BAASA,GAAG,CAACD,CAAD,CAAZ;AAAA,mBAAT,CAAZ;AAAA,iBAAZ,CAtBH;AAuBOE,8BAvBP,GAuBwBnB,qDAAK,CAACoB,QAAN,CAAe,KAAI,CAACpH,IAAL,CAAUmF,GAAV,CAAckC,GAAd,CAAkBC,gBAAlB,CAAmCT,aAAa,CAAC,CAAD,CAAhD,EAAqDA,aAAa,CAAC,CAAD,CAAlE,CAAf,CAvBxB;AAwBKU,mCAxBL,GAwB2B,EAxB3B;;AAyBC,qBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGL,cAAc,CAACxF,MAAnC,EAA2C6F,CAAC,IAAI,CAAhD,EAAmD;AACjDD,qCAAmB,CAACE,IAApB,CAAyB7G,QAAQ,CAACuG,cAAc,CAACO,MAAf,CAAsBF,CAAtB,EAAyB,CAAzB,CAAD,EAA8B,EAA9B,CAAjC;AACD;;AA3BF;AAAA,uBA4B2B,KAAI,CAACxH,IAAL,CAAUmF,GAAV,CAAcwC,cAAd,EA5B3B;;AAAA;AA4BOC,2BA5BP;AAAA;AAAA,uBA6B4B,KAAI,CAACC,eAAL,CAAqBD,WAArB,CA7B5B;;AAAA;AA6BOE,4BA7BP;AA8BOC,gCA9BP,GA8B0BD,YAAY,CAACC,gBA9BvC;AAAA;AAAA,uBA+B2B,KAAI,CAACC,iBAAL,CAAuB9G,MAAvB,EAA+B4G,YAA/B,EAA6C,CAA7C,EAAgD,CAAhD,CA/B3B;;AAAA;AA+BKG,6BA/BL;AA+B+E;AAC9EA,6BAAa,GAAGA,aAAa,CAACC,WAAd,GAA4BrG,KAA5B,CAAkC,CAAC,EAAnC,CAAhB,CAhCD,CAgCyD;;AAhCzD,wCAiCiC,KAAI,CAACsG,iBAAL,EAjCjC,EAiCQC,SAjCR,yBAiCQA,SAjCR,EAiCmBC,UAjCnB,yBAiCmBA,UAjCnB;AAAA;AAAA;AAAA,uBAmC8C,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC1E,uBAAI,CAAC5D,MAAL,CAAYhB,OAAZ,CAAoB,wBAApB,EACE;AAACqE,iCAAa,EAAEA,aAAhB;AAA+BQ,8BAAU,EAAEL;AAA3C,mBADF,EACyD,UAAC1D,GAAD,EAAML,QAAN,EAAmB;AACxE,wBAAIK,GAAJ,EAAS;AACP8D,4BAAM,CAAC9D,GAAD,CAAN;AACA;AACD;;AACD6D,2BAAO,CAAClE,QAAD,CAAP;AACD,mBAPH;AAQD,iBAT0C,CAnC9C;;AAAA;AAmCSqE,4CAnCT;AA6CUjI,sBA7CV,GA6CwBiI,4BA7CxB,CA6CUjI,MA7CV,EA6CkBkI,EA7ClB,GA6CwBD,4BA7CxB,CA6CkBC,EA7ClB;AA8CUC,mCA9CV,GA8C4CnI,MA9C5C,CA8CUmI,mBA9CV,EA8C+BC,SA9C/B,GA8C4CpI,MA9C5C,CA8C+BoI,SA9C/B,EAgDG;AACA;AACA;AACA;AACA;AACA;AACA;;AACMC,2BAvDT,GAuDuB,6EAClBF,mBAxDL,EA0DG;;AACIG,0BA3DP,GA2DoBC,kDAAS,CAACC,OAAV,CAAkB,OAAKJ,SAAvB,EACf,KAAI,CAAC7I,IAAL,CAAUgG,KAAV,CAAgBS,YAAhB,CAA6B;AAACC,mBAAC,EAAE,OAAJ;AAAaC,uBAAK,EAAEmC;AAApB,iBAA7B,CADe,CA3DpB;AA8DGC,0BAAU,GAAGA,UAAU,CAACb,WAAX,GAAyBrG,KAAzB,CAA+B,CAAC,EAAhC,CAAb,CA9DH,CA8DqD;;AA9DrD,sBAgEOoG,aAAa,KAAKc,UAhEzB;AAAA;AAAA;AAAA;;AAiEKG,uBAAO,CAAC3E,KAAR,CAAc,gBAAd,EAAgC0D,aAAhC,EAA+C,sBAA/C,EAAuEc,UAAvE;AACA/G,uBAAO,CAACO,IAAR,CAAaC,wDAAb,EAAgC;AAC9BQ,sBAAI,EAAE,eADwB;AAE9BL,yBAAO,4DAAqDsF,aAArD,iBAAyEc,UAAzE;AAFuB,iBAAhC;AAlEL;AAAA;;AAAA;AAuEK;AACMI,0BAxEX,GAwEwBnD,qDAAK,CAACoD,aAAN,CAAoBR,mBAApB,EAAyCP,UAAzC,CAxExB,EAyEK;;AACMgB,2BA1EX,GA0EyBrD,qDAAK,CAACsD,cAAN,CAAqBH,UAArB,EAAiC5D,EAAjC,CA1EzB;AA2EWgE,uCA3EX,GA2EqCvD,qDAAK,CAACsD,cAAN,CAAqBH,UAArB,EAAiCjD,MAAM,CAAC9D,IAAP,CAAYmF,mBAAZ,CAAjC,CA3ErC;AA4EWxE,mBA5EX,GA4EiB,KAAI,CAAC/C,IAAL,CAAUgG,KAAV,CAAgBS,YAAhB,CACV;AAACC,mBAAC,EAAE,OAAJ;AAAa8C,mBAAC,EAAEH;AAAhB,iBADU,EAEV;AAAC3C,mBAAC,EAAE,OAAJ;AAAa8C,mBAAC,EAAED;AAAhB,iBAFU,CA5EjB;AAAA;AAAA,uBAgF+B,KAAI,CAACvJ,IAAL,CAAUmF,GAAV,CAAcsE,IAAd,CAAmB1G,GAAnB,EAAwB4C,MAAxB,CAhF/B;;AAAA;AAgFW+D,2BAhFX;AAiFK1H,uBAAO,CAACO,IAAR,CAAaC,8DAAb,EAAsC,IAAImH,oDAAJ,CAASzI,MAAT,EAAiBmI,WAAjB,EAA8BE,uBAA9B,EAAuD9D,QAAvD,EAAiEC,KAAjE,EACpCiD,EADoC,EAChCP,SADgC,EACrBL,gBADqB,EACHE,aADG,EACYW,mBADZ,EACiCjD,MADjC,EACyC+D,WADzC,EACsD3D,KADtD,EAEpCO,WAAW,CAACM,QAAZ,CAAqB,QAArB,CAFoC,EAEJJ,WAFI,EAESX,wBAFT,CAAtC;;AAjFL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsFG7D,uBAAO,CAACO,IAAR,CAAaC,wDAAb;;AAtFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAyFA,aAAOR,OAAP;AACD;AAED;;;;;;;;;;;;;qCAUiB4H,I,EAAM;AAAA;;AACrB,UAAI5H,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuB,MAAI,CAAC/B,aAAL,CAAmBI,OAAnB,CAA2BwC,SAA3B,CAAqC8G,IAAI,CAACjE,MAA1C,EAAkDnF,IAAlD,EADvB;;AAAA;AACOM,uBADP;;AAAA,sBAEKA,OAAO,GAAI8I,IAAI,CAACnE,QAAL,GAAgBmE,IAAI,CAAClE,KAFrC;AAAA;AAAA;AAAA;;AAGG1D,uBAAO,CAACO,IAAR,CAAaC,wDAAb,EAAgC;AAC9BQ,sBAAI,EAAE,iBADwB;AAE9BL,yBAAO,EAAE;AAFqB,iBAAhC;AAHH;;AAAA;AAAA;AAAA,uBASO,MAAI,CAACzC,aAAL,CAAmBI,OAAnB,CAA2B2C,OAA3B,CAAmC,MAAI,CAAChD,cAAL,CAAoBiD,OAApB,CAA4BC,OAA/D,EAAwEyG,IAAI,CAACnE,QAAL,GAAgBmE,IAAI,CAAClE,KAA7F,EAAoGvD,IAApG,CAAyG;AAC7GC,sBAAI,EAAEwH,IAAI,CAACjE;AADkG,iBAAzG,CATP;;AAAA;AAAA;;AAAA,qBAamBiE,IAAI,CAAC/D,wBAbxB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAcW,MAAI,CAAC5F,cAAL,CAAoBK,OAApB,CAA4BuJ,0BAA5B,CAAuDD,IAAI,CAACE,UAA5D,EAAwEF,IAAI,CAACnE,QAA7E,EACJmE,IAAI,CAAClE,KADD,EACQkE,IAAI,CAAC7B,gBADb,EAC+B6B,IAAI,CAAC7D,KADpC,EAC2C5D,IAD3C,CACgD;AACpDC,sBAAI,EAAEwH,IAAI,CAACjE;AADyC,iBADhD,EAGHtD,EAHG,CAGA,iBAHA,EAGmB,UAACC,IAAD,EAAU;AACjCsH,sBAAI,CAACG,eAAL,GAAuBzH,IAAvB;AACAN,yBAAO,CAACO,IAAR,CAAaC,sFAAb,EAA8DF,IAA9D;AACD,iBANK,EAMHD,EANG,CAMA,cANA,EAMgB,UAACI,kBAAD,EAAqBC,OAArB,EAAiC;AACrDV,yBAAO,CAACO,IAAR,CAAaC,kFAAb,EAA0DC,kBAA1D,EAA8EC,OAA9E;AACD,iBARK,CAdX;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAwBW,MAAI,CAACzC,cAAL,CAAoBK,OAApB,CAA4B0J,gBAA5B,CAA6CJ,IAAI,CAACE,UAAlD,EAA8DF,IAAI,CAACnE,QAAnE,EAA6EmE,IAAI,CAAClE,KAAlF,EACJkE,IAAI,CAAC7B,gBADD,EACmB5F,IADnB,CACwB;AAC5BC,sBAAI,EAAEwH,IAAI,CAACjE;AADiB,iBADxB,EAGHtD,EAHG,CAGA,iBAHA,EAGmB,UAACC,IAAD,EAAU;AACjCsH,sBAAI,CAACG,eAAL,GAAuBzH,IAAvB;AACAN,yBAAO,CAACO,IAAR,CAAaC,sFAAb,EAA8DF,IAA9D;AACD,iBANK,EAMHD,EANG,CAMA,cANA,EAMgB,UAACI,kBAAD,EAAqBC,OAArB,EAAiC;AACrDV,yBAAO,CAACO,IAAR,CAAaC,kFAAb,EAA0DC,kBAA1D,EAA8EC,OAA9E;AACD,iBARK,CAxBX;;AAAA;AAAA;;AAAA;AAaSA,uBAbT;AAiCGkH,oBAAI,CAACK,MAAL,GAAcvH,OAAO,CAACwH,MAAR,CAAeC,iBAAf,CAAiCC,YAAjC,CAA8CH,MAA5D;AACAL,oBAAI,CAAClH,OAAL,GAAeA,OAAf;AACAkH,oBAAI,CAACS,SAAL,GAAiB,CAAjB;AACAT,oBAAI,CAACU,mBAAL,GAA2B5H,OAAO,CAACkF,WAAnC;AACA5F,uBAAO,CAACO,IAAR,CAAaC,6EAAb,EAAqDE,OAArD;AACAV,uBAAO,CAACO,IAAR,CAAaC,qEAAb,EAA6CoH,IAA7C;AAtCH;AAAA;;AAAA;AAAA;AAAA;AAwCG5H,uBAAO,CAACO,IAAR,CAAaC,wDAAb,EAAgC,aAAIG,OAApC;;AAxCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AA2CA,aAAOX,OAAP;AACD;AAED;;;;;;;;;;;;;sCAUkBuI,K,EAAO;AAAA;;AACvB,UAAIvI,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACOuI,4BADP,GACsBD,KAAK,CAACxD,GAAN,CAAU,UAAC6C,IAAD;AAAA,yBAAUA,IAAI,CAACE,UAAf;AAAA,iBAAV,CADtB;AAEOW,yBAFP,GAEmBF,KAAK,CAACxD,GAAN,CAAU,UAAC6C,IAAD;AAAA,yBAAUA,IAAI,CAACnE,QAAf;AAAA,iBAAV,CAFnB;AAGOiF,sBAHP,GAGgBH,KAAK,CAACxD,GAAN,CAAU,UAAC6C,IAAD;AAAA,yBAAUA,IAAI,CAAClE,KAAf;AAAA,iBAAV,CAHhB;AAIOiF,oBAJP,GAIcJ,KAAK,CAACxD,GAAN,CAAU,UAAC6C,IAAD;AAAA,yBAAUA,IAAI,CAACnE,QAAL,GAAgBmE,IAAI,CAAClE,KAA/B;AAAA,iBAAV,CAJd;AAAA;AAAA,uBAKuB,MAAI,CAACxF,aAAL,CAAmBI,OAAnB,CAA2BwC,SAA3B,CAAqCyH,KAAK,CAAC,CAAD,CAAL,CAAS5E,MAA9C,EAAsDnF,IAAtD,EALvB;;AAAA;AAKOM,uBALP;AAMO8J,yBANP,GAMmBD,IAAI,CAACE,MAAL,CAAY,UAACC,CAAD,EAAIC,CAAJ;AAAA,yBAAUD,CAAC,GAAGC,CAAd;AAAA,iBAAZ,EAA6B,CAA7B,CANnB;;AAAA,sBAOKjK,OAAO,GAAG8J,SAPf;AAAA;AAAA;AAAA;;AAQG5I,uBAAO,CAACO,IAAR,CAAaC,wDAAb,EAAgC;AAC9BQ,sBAAI,EAAE,iBADwB;AAE9BL,yBAAO,EAAE;AAFqB,iBAAhC;AARH;;AAAA;AAAA;AAAA,uBAcO,MAAI,CAACzC,aAAL,CAAmBI,OAAnB,CAA2B2C,OAA3B,CAAmC,MAAI,CAAChD,cAAL,CAAoBiD,OAApB,CAA4BC,OAA/D,EAAwEyH,SAAxE,EAAmFzI,IAAnF,CAAwF;AAC5FC,sBAAI,EAAEmI,KAAK,CAAC,CAAD,CAAL,CAAS5E;AAD6E,iBAAxF,CAdP;;AAAA;AAAA;AAAA,uBAiBO,MAAI,CAAC1F,cAAL,CAAoBK,OAApB,CAA4B0K,iBAA5B,CAA8CR,YAA9C,EAA4DC,SAA5D,EAAuEC,MAAvE,EAA+EH,KAAK,CAAC,CAAD,CAAL,CAASxC,gBAAxF,EACJ5F,IADI,CACC;AACHC,sBAAI,EAAEmI,KAAK,CAAC,CAAD,CAAL,CAAS5E;AADZ,iBADD,EAIJtD,EAJI,CAID,iBAJC,EAIkB,UAACC,IAAD,EAAU;AAC9B,uBAAK,IAAI2E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsD,KAAK,CAAC5I,MAA1B,EAAkCsF,CAAC,EAAnC,EAAuC;AACrCsD,yBAAK,CAACtD,CAAD,CAAL,CAAS8C,eAAT,GAA2BzH,IAA3B;AACD;;AACDN,yBAAO,CAACO,IAAR,CAAaC,uFAAb,EAA+DF,IAA/D;AACD,iBATG,EAUJD,EAVI,CAUD,cAVC,EAUe,UAACI,kBAAD,EAAqBC,OAArB,EAAiC;AAClDV,yBAAO,CAACO,IAAR,CAAaC,mFAAb,EAA2DC,kBAA3D,EAA+EC,OAA/E;AACD,iBAZG,EAaJ0B,IAbI,CAaC,UAAC1B,OAAD,EAAa;AAChB,sBAAMuI,OAAO,GAAGvI,OAAO,CAACwH,MAAR,CAAegB,kBAAf,CAAkCd,YAAlC,CAA+Ca,OAA/D;;AACA,uBAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsD,KAAK,CAAC5I,MAA1B,EAAkCsF,CAAC,EAAnC,EAAuC;AACrCsD,yBAAK,CAACtD,CAAD,CAAL,CAASgD,MAAT,GAAkBgB,OAAO,CAAChE,CAAD,CAAzB;AACAsD,yBAAK,CAACtD,CAAD,CAAL,CAASvE,OAAT,GAAmBA,OAAnB;AACA6H,yBAAK,CAACtD,CAAD,CAAL,CAASoD,SAAT,GAAqB,CAArB;AACAE,yBAAK,CAACtD,CAAD,CAAL,CAASqD,mBAAT,GAA+B5H,OAAO,CAACkF,WAAvC;AACD;;AACD5F,yBAAO,CAACO,IAAR,CAAaC,8EAAb,EAAsDE,OAAtD;AACAV,yBAAO,CAACO,IAAR,CAAaC,sEAAb,EAA8C+H,KAA9C;AACD,iBAvBG,CAjBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AA0CA,aAAOvI,OAAP;AACD;AAED;;;;;;;;;;;;gDAM0B4H,I;;;;;;;uBACH,KAAK3J,cAAL,CAAoBK,OAApB,CAA4B6K,aAA5B,CAA0CvB,IAAI,CAACK,MAA/C,EAAuDzJ,IAAvD,E;;;AAAfC,sB;AACNmJ,oBAAI,CAACS,SAAL,GAAiBzJ,QAAQ,CAACH,MAAM,CAACE,MAAR,CAAzB;AACAiJ,oBAAI,CAACwB,KAAL,GAAa3K,MAAM,CAAC2K,KAApB;kDACOxB,I;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;gDAMwBA,I;;;;;;uBACR,KAAK3J,cAAL,CAAoBK,OAApB,CAA4B6K,aAA5B,CAA0CvB,IAAI,CAACK,MAA/C,EAAuDzJ,IAAvD,E;;;iEAA+D6K,U;;;;;;;;;;;;;;;;AAG/E;;;;;;;;;;;;gDAMgBC,S;;;;;;uBACD,KAAKrL,cAAL,CAAoBK,OAApB,CAA4BiL,SAA5B,CAAsCD,SAAtC,EAAiD9K,IAAjD,E;;;;;;;;;;;;;;;;;;;AAGf;;;;;;;;;;;;;;;gDASsBoH,W;;;;;;sBACf4D,MAAM,CAACC,IAAP,CAAY,KAAK3G,iBAAjB,EAAoCnD,MAApC,KAA+C,CAAhD,IACDiG,WAAW,GAAG,KAAK9C,iBAAL,CAAuBiD,gBAArC,IAAyD,KAAK2D,S;;;;;;uBACxC,KAAKzL,cAAL,CAAoBK,OAApB,CAA4BqL,YAA5B,GAA2CnL,IAA3C,E;;;AAAvB,qBAAKkL,S;;uBAC+B,KAAKzL,cAAL,CAAoBK,OAApB,CAA4BuH,eAA5B,CAA4CD,WAA5C,EAAyDpH,IAAzD,E;;;AAA9BoL,qC;AACN,qBAAK9G,iBAAL,GAAyB;AACvBiD,kCAAgB,EAAEnH,QAAQ,CAACgL,qBAAqB,CAAC,CAAD,CAAtB,CADH;AAEvBC,sBAAI,EAAEC,4CAAI,CAACC,MAAL,CAAYH,qBAAqB,CAAC,CAAD,CAAjC,CAFiB;AAGvBI,yBAAO,EAAEJ,qBAAqB,CAAC,CAAD,CAHP;AAIvBK,wBAAM,EAAEL,qBAAqB,CAAC,CAAD,CAArB,CAAyB7E,GAAzB,CAA6B,UAACmF,CAAD;AAAA,2BAAOJ,4CAAI,CAACC,MAAL,CAAYG,CAAZ,CAAP;AAAA,mBAA7B;AAJe,iBAAzB;;;kDAOK,KAAKpH,iB;;;;;;;;;;;;;;;;AAGd;;;;;;;;;;;;sCASkB5D,M,EAAQiL,M,EAA6B;AAAA,UAArBC,eAAqB,uEAAH,CAAG;AACrD;AACA,UAAIC,QAAQ,GAAGF,MAAM,CAACF,MAAP,CAAcpB,MAAd,CAAqB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUe,4CAAI,CAACQ,GAAL,CAASxB,CAAT,EAAYC,CAAZ,CAAV;AAAA,OAArB,EAA+Ce,4CAAI,CAACC,MAAL,CAAY,CAAZ,CAA/C,CAAf;AACA,UAAIhG,KAAK,GAAG,CAAZ;AACA,UAAIwG,eAAe,GAAG,EAAtB;;AACA,SAAG;AACD;AACA,YAAMxJ,GAAG,GAAGsE,yDAAA,CACV,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CADU,EAEV,CAAC8E,MAAM,CAACN,IAAP,CAAYjF,QAAZ,CAAqB,EAArB,CAAD,EAA2B1F,MAA3B,EAAmC6E,KAAnC,CAFU,CAAZ;AAIA,YAAMzD,IAAI,GAAGkK,iDAAS,CAACC,SAAV,CAAoB1J,GAApB,CAAb,CANC,CAOD;;AACA,YAAI2J,OAAO,GAAGZ,4CAAI,CAACa,SAAL,CAAeb,4CAAI,CAACC,MAAL,CAAYzJ,IAAZ,CAAf,EAAkC+J,QAAlC,CAAd;AACA,YAAIO,cAAc,GAAGT,MAAM,CAACH,OAAP,CAAeG,MAAM,CAACH,OAAP,CAAerK,MAAf,GAAwB,CAAvC,CAArB,CATC,CAUD;AACA;AACA;;AACA,aAAK,IAAIsF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkF,MAAM,CAACH,OAAP,CAAerK,MAAnC,EAA2CsF,CAAC,EAA5C,EAAgD;AAC9CyF,iBAAO,GAAGZ,4CAAI,CAACe,QAAL,CAAcH,OAAd,EAAuBP,MAAM,CAACF,MAAP,CAAchF,CAAd,CAAvB,CAAV;;AACA,cAAIyF,OAAO,IAAI,CAAf,EAAkB;AAChBE,0BAAc,GAAGT,MAAM,CAACH,OAAP,CAAe/E,CAAf,CAAjB;AACA;AACD;AACF;;AACD,YAAI,CAACsF,eAAe,CAACxK,QAAhB,CAAyB6K,cAAzB,CAAL,EAA+C;AAC7CL,yBAAe,CAAC9E,IAAhB,CAAqBmF,cAArB;AACD;;AACD7G,aAAK;AACN,OAxBD,QAyBOwG,eAAe,CAAC5K,MAAhB,GAAyByK,eAzBhC;;AA0BA,aAAOG,eAAP;AACD;AAED;;;;;;;;;;kCAOc3C,I,EAAM;AAAA;;AAClB,UAAI5H,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACK6K,+BADL,GACuB,eADvB;AAEKC,wBAFL,GAEgBvK,yEAFhB;;AAGC,oBAAIoH,IAAI,CAAC/D,wBAAT,EAAmC;AACjCiH,iCAAe,GAAG,sBAAlB;AACAC,0BAAQ,GAAGvK,gFAAX;AACD;;AANF;AAAA;AAAA,uBAQS,IAAI8F,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,wBAAI,CAAC5D,MAAL,CAAYhB,OAAZ,CAAoBkJ,eAApB,EAAqCvJ,MAAM,CAACyJ,aAAP,CAAqBpD,IAArB,CAArC,EAAiE,UAAClF,GAAD,EAAML,QAAN,EAAmB;AAClF,wBAAIK,GAAJ,EAAS;AACP8D,4BAAM,CAAC9D,GAAD,CAAN;AACA;AACD;;AACD6D,2BAAO,CAAClE,QAAD,CAAP;AACD,mBAND;AAOD,iBARK,CART;;AAAA;AAiBGrC,uBAAO,CAACO,IAAR,CAAawK,QAAb,EAAuBnD,IAAvB;AAjBH;AAAA;;AAAA;AAAA;AAAA;AAmBG5H,uBAAO,CAACO,IAAR,CAAaC,wDAAb;;AAnBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAsBA,aAAOR,OAAP;AACD;AAED;;;;;;;;;;kCAOc4H,I,EAAM;AAAA;;AAClB,UAAI5H,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEqC,IAAIqG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjE,wBAAI,CAAC5D,MAAL,CAAYhB,OAAZ,CAAoB,eAApB,EAAqC;AAACqG,0BAAM,EAAEjE,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACK,MAApB;AAAT,mBAArC,EAA4E,UAACvF,GAAD,EAAML,QAAN,EAAmB;AAC7F,wBAAIK,GAAJ,EAAS;AACP8D,4BAAM,CAAC9D,GAAD,CAAN;AACA;AACD;;AACD6D,2BAAO,CAAClE,QAAD,CAAP;AACD,mBAND;AAOD,iBARiC,CAFrC;;AAAA;AAES4I,mCAFT;;AAAA,qBAWOA,mBAAmB,CAACxM,MAX3B;AAAA;AAAA;AAAA;;AAAA,+BAYawM,mBAAmB,CAACxM,MAApB,CAA2BE,MAZxC;AAAA,kDAaY,SAbZ,wBAkBY,QAlBZ,yBAsBY,YAtBZ,yBAuBY,YAvBZ;AAAA;;AAAA;AAcSiJ,oBAAI,CAACsD,KAAL,GAAaD,mBAAmB,CAACxM,MAApB,CAA2ByM,KAAxC;AACAtD,oBAAI,CAACuD,eAAL,GAAuBF,mBAAmB,CAACxM,MAApB,CAA2B0M,eAAlD;AACAvD,oBAAI,CAACwD,eAAL,GAAuBH,mBAAmB,CAACxM,MAApB,CAA2B2M,eAAlD;AACAxD,oBAAI,CAACpD,WAAL,GAAmByG,mBAAmB,CAACxM,MAApB,CAA2B+F,WAA9C;;AAjBT;AAmBSoD,oBAAI,CAACyD,0BAAL,GAAkCJ,mBAAmB,CAACxM,MAApB,CAA2B6M,MAA7D;AACA1D,oBAAI,CAAC2D,OAAL,GAAeN,mBAAmB,CAACxM,MAApB,CAA2B8M,OAA1C;AACA3D,oBAAI,CAAC4D,aAAL,GAAqBP,mBAAmB,CAACxM,MAApB,CAA2BgN,SAAhD;;AArBT;AAwBS7D,oBAAI,CAAC8D,SAAL,GAAiBT,mBAAmB,CAACxM,MAApB,CAA2BE,MAA5C;AAxBT;;AAAA;AAAA,sBA2BgB,IAAI4F,KAAJ,CAAU,4BAAV,CAAD,CAA0C5D,OA3BzD;;AAAA;AAAA;AAAA;;AAAA;AA8BKiH,oBAAI,CAAC8D,SAAL,GAAiB,IAAjB;;AA9BL;AAgCG1L,uBAAO,CAACO,IAAR,CAAaC,yEAAb,EAAiDoH,IAAjD;AAhCH;AAAA;;AAAA;AAAA;AAAA;AAkCG5H,uBAAO,CAACO,IAAR,CAAaC,wDAAb;;AAlCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAqCA,aAAOR,OAAP;AACD;AAED;;;;;;;;;;;;iDAMwB4H,I;;;;;;;yCACD,KAAKzB,iBAAL,E,EAAdE,U,0BAAAA,U;AACDc,0B,GAAanD,qDAAK,CAACoD,aAAN,CAAoBQ,IAAI,CAAChB,mBAAzB,EAA8CP,UAA9C,C;AACnBuB,oBAAI,CAAC+D,eAAL,GAAuB3H,qDAAK,CAAC4H,cAAN,CAAqBzE,UAArB,EAAiCS,IAAI,CAACyD,0BAAtC,CAAvB;mDACOzD,I;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;uDAMoBA,I,EAAMiE,U;;;;;;;;;;AAEtB,qBAAM,IAAIvF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,sBAAI,CAAC5D,MAAL,CAAYhB,OAAZ,CAAoB,eAApB,EAAqC;AACnCqG,wBAAM,EAAEjE,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACK,MAApB,CAD2B;AACEhC,+BAAa,EAAE2B,IAAI,CAAC3B,aADtB;AAEnC4F,4BAAU,EAAEA;AAFuB,iBAArC,EAGG,UAACnJ,GAAD,EAAML,QAAN,EAAmB;AACpB,sBAAIK,GAAJ,EAAS;AACP8D,0BAAM,CAAC9D,GAAD,CAAN;AACA;AACD;;AACDkF,sBAAI,CAAC8D,SAAL,GAAiBrJ,QAAQ,CAAC5D,MAAT,CAAgBE,MAAjC;;AACA,sBAAIkN,UAAJ,EAAgB;AACdjE,wBAAI,CAACyD,0BAAL,GAAkChJ,QAAQ,CAAC5D,MAAT,CAAgB6M,MAAlD;AACD;;AACD/E,yBAAO,CAACqB,IAAD,CAAP;AACD,iBAbD;AAcD,eAfK,CAAN;;;;;;;;;;;;;AAmBJ;;;;;;;;;;wCAOoBA,I,EAAMkE,S,EAAW9L,O,EAAS;AAAA;;AAC5C,UAAI+L,CAAC,GAAGD,SAAS,CAACE,IAAV,EAAR;AACAD,OAAC,CAACpH,KAAF,CAAQvC,IAAR,CAAa,UAAC6J,CAAD,EAAO;AAClBjM,eAAO,CAACO,IAAR,CAAaC,0EAAb,EAAkDyL,CAAlD;;AACA,YAAIA,CAAC,CAACP,SAAF,KAAgB,SAAhB,IAA6BO,CAAC,CAACP,SAAF,KAAgB,QAAjD,EAA2D;AACzD,gBAAI,CAACQ,mBAAL,CAAyBtE,IAAzB,EAA+BkE,SAA/B,EAA0C9L,OAA1C;AACD;AACF,OALD,WAKS,UAAC0C,GAAD,EAAS;AAChB1C,eAAO,CAACO,IAAR,CAAaC,wDAAb,EAAgCkC,GAAhC;AACD,OAPD;AAQD;AAED;;;;;;;;;;;mCAQekF,I,EAA0B;AAAA,UAApBiE,UAAoB,uEAAP,KAAO;AACvC,UAAI7L,OAAO,GAAG,IAAIC,oDAAJ,EAAd;AACA,UAAI6L,SAAS,GAAG,KAAKK,iBAAL,CAAuBvE,IAAvB,EAA6BiE,UAA7B,CAAhB;AACA,WAAKK,mBAAL,CAAyBtE,IAAzB,EAA+BkE,SAA/B,EAA0C9L,OAA1C;AACA,aAAOA,OAAP;AACD;AAED;;;;;;;;;;;;;iDAOkB4H,I;;;;;;;AAAMwE,wB,iEAAS,I;;;sBACxBxE,IAAI,CAACS,SAAL,KAAmB,C;;;;;;uBACX,KAAKgE,mBAAL,CAAyBzE,IAAzB,C;;;AAAbA,oB;;uBACM5D,qDAAK,CAACsI,KAAN,CAAYF,QAAZ,C;;;;;;;mDAEDxE,I;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;AAmBA;;;;;;wCAMoB;AAClB;AACA,UAAM2E,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAApC;AACA,UAAInG,UAAJ;AACA,UAAIoG,iBAAiB,GAAGF,SAAS,GAAGC,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4B,mBAA5B,CAAH,GAC/B,KAAK3J,mBAAL,CAAyB,mBAAzB,CADF;;AAEA,UAAIyJ,iBAAiB,IAAI,IAAzB,EAA+B;AAC7B,YAAIG,MAAM,GAAGC,iDAAK,CAACD,MAAN,CAAaE,cAAb,EAAb,CAD6B,CAE7B;;AACAF,cAAM,CAACG,YAAP,GAAsB,UAASC,MAAT,EAAiB;AACrC,iBAAOH,iDAAK,CAACI,IAAN,CAAWC,UAAX,CAAsB,SAAtB,EAAiCF,MAAjC,CAAP;AACD,SAFD;;AAGA3G,kBAAU,GAAGwG,iDAAK,CAACI,IAAN,CAAWE,UAAX,CAAsBP,MAAM,CAACQ,QAAP,CAAgB,EAAhB,CAAtB,CAAb;AACAb,iBAAS,GAAGC,MAAM,CAACE,YAAP,CAAoBW,OAApB,CAA4B,mBAA5B,EAAiDC,IAAI,CAACjH,UAAD,CAArD,CAAH,GACP,KAAKrD,mBAAL,CAAyB,mBAAzB,IAAgDkB,MAAM,CAAC9D,IAAP,CAAYiG,UAAZ,EAAwB,QAAxB,EAAkCzB,QAAlC,CAA2C,QAA3C,CADlD;AAED,OATD,MASO;AACLyB,kBAAU,GAAGkG,SAAS,GAAGgB,IAAI,CAACd,iBAAD,CAAP,GAA6BvI,MAAM,CAAC9D,IAAP,CAAYqM,iBAAZ,EAA+B,QAA/B,EAAyC7H,QAAzC,CAAkD,QAAlD,CAAnD;AACD;;AACD,UAAIwB,SAAS,GAAGY,kDAAS,CAACwG,qBAAV,CAAgCnH,UAAhC,CAAhB;AACA,aAAO;AAACD,iBAAS,EAATA,SAAD;AAAYC,kBAAU,EAAVA;AAAZ,OAAP;AACD;AAED;;;;;;;;;;;;;;;;;yCAcqB9C,E,EAAIC,I,EAAMC,Q,EAAUC,K,EAAOC,M,EAAQS,O,EAAuB;AAAA;;AAAA,UAAdqJ,UAAc,uEAAH,CAAG;AAC7E,UAAIzN,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKyN,0BADL,GACkB,CADlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAIwB,IAAIpH,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClD,kCAAI,CAACmH,UAAL,CAAgBpK,EAAhB,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,KAApC,EAA2CC,MAA3C,EAAmDS,OAAnD,EAA4D,IAA5D,EACA/D,EADA,CACGG,8DADH,EAC4B,UAAC/B,MAAD;AAAA,qCAAY8H,OAAO,CAAC9H,MAAD,CAAnB;AAAA,6BAD5B,EAEA4B,EAFA,CAEGG,wDAFH,EAEsB,UAAC+B,KAAD;AAAA,qCAAWiE,MAAM,CAACjE,KAAD,CAAjB;AAAA,6BAFtB;AAGD,2BAJkB,CAJxB;;AAAA;AAISqL,gCAJT;AASK5N,iCAAO,CAACO,IAAR,CAAaC,8DAAb,EAAsCoN,MAAtC;AATL;AAAA,iCAUoB,IAAItH,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9C,kCAAI,CAACwB,gBAAL,CAAsB4F,MAAtB,EACAvN,EADA,CACGG,qEADH,EACmC,UAAC/B,MAAD;AAAA,qCAAY8H,OAAO,CAAC9H,MAAD,CAAnB;AAAA,6BADnC,EAEA4B,EAFA,CAEGG,wDAFH,EAEsB,UAAC+B,KAAD;AAAA,qCAAWiE,MAAM,CAACjE,KAAD,CAAjB;AAAA,6BAFtB;AAGD,2BAJc,CAVpB;;AAAA;AAUKqL,gCAVL;AAeK5N,iCAAO,CAACO,IAAR,CAAaC,qEAAb,EAA6CoN,MAA7C;AAfL;AAAA,iCAgBW,IAAItH,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,kCAAI,CAACqH,aAAL,CAAmBD,MAAnB,EACAvN,EADA,CACGG,gFADH,EAC8C,UAACE,OAAD;AAAA,qCAAa6F,OAAO,CAAC7F,OAAD,CAApB;AAAA,6BAD9C,EAEAL,EAFA,CAEGG,wDAFH,EAEsB,UAAC+B,KAAD;AAAA,qCAAWiE,MAAM,CAACjE,KAAD,CAAjB;AAAA,6BAFtB;AAGD,2BAJK,CAhBX;;AAAA;AAqBKvC,iCAAO,CAACO,IAAR,CAAaC,gFAAb,EAAwDoN,MAAxD;AArBL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,sBAwBUF,UAAU,MAAMD,UAAjB,IACD,kBAAQ,6FAzBhB;AAAA;AAAA;AAAA;;AA0BOzN,uBAAO,CAACO,IAAR,CAAaC,wDAAb;AA1BP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAgCA,aAAOR,OAAP;AACD;AAED;;;;;;;;;;;;;;;;gCAaYuD,E,EAAIC,I,EAAMC,Q,EAAUC,K,EAAOC,M,EAAQzE,M,EAAsB;AAAA;;AAAA,UAAduO,UAAc,uEAAH,CAAG;AACnE,UAAIzN,OAAO,GAAG,IAAIC,oDAAJ,EAAd;;AACA;AAAA;AAAA,8BAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKyN,0BADL,GACkB,CADlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAIsB,IAAIpH,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChD,kCAAI,CAACmH,UAAL,CAAgBpK,EAAhB,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,KAApC,EAA2CC,MAA3C,EAAmDzE,MAAnD,EAA2D,KAA3D,EACAmB,EADA,CACGG,8DADH,EAC4B,UAAC/B,MAAD;AAAA,qCAAY8H,OAAO,CAAC9H,MAAD,CAAnB;AAAA,6BAD5B,EAEA4B,EAFA,CAEGG,wDAFH,EAEsB,UAAC+B,KAAD;AAAA,qCAAWiE,MAAM,CAACjE,KAAD,CAAjB;AAAA,6BAFtB;AAGD,2BAJgB,CAJtB;;AAAA;AAISqF,8BAJT;AASK5H,iCAAO,CAACO,IAAR,CAAaC,8DAAb,EAAsCoH,IAAtC;AATL;AAAA,iCAUkB,IAAItB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5C,kCAAI,CAACwB,gBAAL,CAAsBJ,IAAtB,EACAvH,EADA,CACGG,qEADH,EACmC,UAAC/B,MAAD;AAAA,qCAAY8H,OAAO,CAAC9H,MAAD,CAAnB;AAAA,6BADnC,EAEA4B,EAFA,CAEGG,wDAFH,EAEsB,UAAC+B,KAAD;AAAA,qCAAWiE,MAAM,CAACjE,KAAD,CAAjB;AAAA,6BAFtB;AAGD,2BAJY,CAVlB;;AAAA;AAUKqF,8BAVL;AAeK5H,iCAAO,CAACO,IAAR,CAAaC,qEAAb,EAA6CoH,IAA7C;AAfL;AAAA,iCAgBW,IAAItB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,kCAAI,CAACqH,aAAL,CAAmBjG,IAAnB,EACAvH,EADA,CACGG,yEADH,EACuC,UAACE,OAAD;AAAA,qCAAa6F,OAAO,CAAC7F,OAAD,CAApB;AAAA,6BADvC,EAEAL,EAFA,CAEGG,wDAFH,EAEsB,UAAC+B,KAAD;AAAA,qCAAWiE,MAAM,CAACjE,KAAD,CAAjB;AAAA,6BAFtB;AAGD,2BAJK,CAhBX;;AAAA;AAqBKvC,iCAAO,CAACO,IAAR,CAAaC,yEAAb,EAAiDoH,IAAjD;AArBL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,sBAwBU8F,UAAU,MAAMD,UAAjB,IACD,kBAAQ,6FAzBhB;AAAA;AAAA;AAAA;;AA0BOzN,uBAAO,CAACO,IAAR,CAAaC,wDAAb;AA1BP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAgCA,aAAOR,OAAP;AACD;AAED;;;;;;;;kCA9IqB4H,I,EAAM;AACzB,aAAOA,IAAI,CAAC/D,wBAAL,GAAgC;AACrCO,eAAO,EAAEwD,IAAI,CAACxD,OADuB;AAErC0J,qBAAa,EAAE9J,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACL,uBAApB,CAFsB;AAEwBF,mBAAW,EAAErD,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACP,WAApB,CAFrC;AAGrC0G,iBAAS,EAAE/J,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACnB,UAApB,CAH0B;AAGOuH,uBAAe,EAAEhK,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAAC1I,MAApB,CAHxB;AAIrC+G,qBAAa,EAAE2B,IAAI,CAAC3B;AAJiB,OAAhC,GAKH;AACFgC,cAAM,EAAEjE,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACK,MAApB,CADN;AACmChC,qBAAa,EAAE2B,IAAI,CAAC3B,aADvD;AAEFoB,mBAAW,EAAErD,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACP,WAApB,CAFX;AAE6CyG,qBAAa,EAAE9J,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACL,uBAApB,CAF5D;AAGFyG,uBAAe,EAAEhK,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAAC1I,MAApB,CAHf;AAG4C6O,iBAAS,EAAE/J,qDAAK,CAACoB,QAAN,CAAewC,IAAI,CAACnB,UAApB;AAHvD,OALJ;AAUD;;;8BAwIgB;AACf,aAAO,OAAP;AACD;;;;;;;;;;;;;;;;;;ACztBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,IAAMwH,KAAK,GAAG,OAAd;AACA,IAAMC,wBAAwB,GAAG,wBAAjC;AACA,IAAMC,oBAAoB,GAAG,qBAA7B;AACA,IAAMC,eAAe,GAAG,gBAAxB;AACA,IAAMC,yBAAyB,GAAG,yBAAlC;AACA,IAAMC,qBAAqB,GAAG,sBAA9B;AACA,IAAMC,gBAAgB,GAAG,iBAAzB;AACA,IAAMC,sBAAsB,GAAG,sBAA/B;AACA,IAAMC,kBAAkB,GAAG,mBAA3B;AACA,IAAMC,aAAa,GAAG,cAAtB;AACA,IAAMC,uBAAuB,GAAG,uBAAhC;AACA,IAAMC,mBAAmB,GAAG,oBAA5B;AACA,IAAMC,cAAc,GAAG,eAAvB;AAEA,IAAMC,qBAAqB,GAAG,oBAA9B;AACA,IAAMC,8BAA8B,GAAG,4BAAvC;AACA,IAAMC,0BAA0B,GAAG,yBAAnC;AACA,IAAMC,qBAAqB,GAAG,oBAA9B;AACA,IAAMC,qBAAqB,GAAG,oBAA9B;AAEA,IAAMC,WAAW,GAAG,YAApB;AACA,IAAMC,iBAAiB,GAAG,iBAA1B;AACA,IAAMC,mCAAmC,GAAG,iCAA5C;AACA,IAAMC,+BAA+B,GAAG,8BAAxC;AACA,IAAMC,0BAA0B,GAAG,yBAAnC;AACA,IAAMC,kBAAkB,GAAG,kBAA3B;AACA,IAAMC,oCAAoC,GAAG,kCAA7C;AACA,IAAMC,gCAAgC,GAAG,+BAAzC;AACA,IAAMC,2BAA2B,GAAG,0BAApC;AACA,IAAMC,mBAAmB,GAAG,mBAA5B;AAEA,IAAMC,sBAAsB,GAAG,qBAA/B;AACA,IAAMC,uBAAuB,GAAG,sBAAhC;AACA,IAAMC,sBAAsB,GAAG,qBAA/B;AACA,IAAMC,6BAA6B,GAAG,4BAAtC;AAEA,IAAMC,oBAAoB,GAAG,mBAA7B,C;;;;;;;;;;;;ACpCP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;CAEA;;AACA;AACA;AACA;AACA;AAEApD,iDAAK,CAAC3L,OAAN,CAAcgP,iBAAd,GAAkC,IAAlC;AAEA,IAAMC,EAAE,GAAGC,+CAAQ,CAACC,EAAppM,cAAT,CAAwBN,MAAxB,EAAgCI,KAAhC,EAAuC;AACrC,SAAOyG,iDAAS,CAAC/F,YAAV,CACL;AAACC,KAAC,EAAE,OAAJ;AAAa8C,KAAC,EAAE7D;AAAhB,GADK,EAEL;AAACe,KAAC,EAAE,MAAJ;AAAY8C,KAAC,EAAEzD;AAAf,GAFK,CAAP;AAID;AAED;;;;;;;;;;AAQA,SAASuM,cAAT,CAAwBC,MAAxB,EAAgCC,WAAhC,EAA6C;AAAA;AAAA;AAAA;;AAAA;AAC3C,yBAAkBA,WAAlB,8HAA+B;AAAA,UAAtBC,KAAsB;AAC7BA,WAAK,GAAGrL,QAAQ,CAACqL,KAAD,CAAhB,CAD6B,CAE7B;;AACAF,YAAM,IAAIzG,2CAAI,CAACC,MAAL,CAAY0G,KAAK,CAAC9Q,MAAN,GAAa,CAAzB,EAA4BiF,QAA5B,CAAqC,EAArC,EAAyC8L,QAAzC,CAAkD,EAAlD,EAAsD,GAAtD,IAA6DD,KAAvE;AACD;AAL0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM3C,SAAOF,MAAP;AACD;AAED;;;;;;;;;AAOA,SAASI,mBAAT,CAA6BJ,MAA7B,EAAqCC,WAArC,EAAkD;AAAA;AAAA;AAAA;;AAAA;AAChD,0BAAkBA,WAAlB,mIAA+B;AAAA,UAAtBI,KAAsB;AAC7BL,YAAM,IAAIzG,2CAAI,CAACC,MAAL,CAAY6G,KAAK,CAACjR,MAAlB,EAA0BiF,QAA1B,CAAmC,EAAnC,EAAuC8L,QAAvC,CAAgD,EAAhD,EAAoD,GAApD,CAAV;AACAH,YAAM,GAAGD,cAAc,CAACC,MAAD,EAASK,KAAT,CAAvB;AACD;AAJ+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKhD,SAAOL,MAAP;AACD;AAED;;;;;;;;AAMA,SAASjQ,IAAT,CAAckQ,WAAd,EAA2B;AACzB,MAAID,MAAM,GAAGD,cAAc,CAAC,EAAD,EAAKE,WAAL,CAA3B;AACA,SAAOhG,iDAAS,CAAC/F,YAAV,CAAuB;AAACC,KAAC,EAAE,OAAJ;AAAa8C,KAAC,EAAE+I;AAAhB,GAAvB,CAAP;AACD;AAED;;;;;;;;;;;AASA,SAASM,aAAT,CAAuBhH,IAAvB,EAA6B9F,KAA7B,EAAoC+M,eAApC,EAAqDC,YAArD,EAAmE;AACjE,MAAIR,MAAM,GAAG,EAAb;AACAA,QAAM,GAAGD,cAAc,CAACC,MAAD,EAAS,CAAC1G,IAAD,EAAO9F,KAAP,CAAT,CAAvB;AACAwM,QAAM,GAAGI,mBAAmB,CAACJ,MAAD,EAAS,CAACO,eAAD,EAAkBC,YAAlB,CAAT,CAA5B;AACA,SAAOvG,iDAAS,CAAC/F,YAAV,CAAuB;AAACC,KAAC,EAAE,OAAJ;AAAa8C,KAAC,EAAE+I;AAAhB,GAAvB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;AAcA,SAASS,kBAAT,CAA4BvR,QAA5B,EAAsC+I,YAAtC,EAAoDyI,kBAApD,EAAwEvR,gBAAxE,EAA0FwR,YAA1F,EAAwGC,SAAxG,EAC4BC,oBAD5B,EACkDC,+BADlD,EACmFC,WADnF,EACgG;AAC9F,MAAIf,MAAM,GAAG,EAAb;AACAA,QAAM,GAAGD,cAAc,CAACC,MAAD,EAAS,CAAC9Q,QAAD,CAAT,CAAvB;AACA8Q,QAAM,GAAGI,mBAAmB,CAACJ,MAAD,EAAS,CAAC/H,YAAD,CAAT,CAA5B;AACA+H,QAAM,GAAGD,cAAc,CAACC,MAAD,EAAS,CAACU,kBAAD,CAAT,CAAvB;AACAV,QAAM,GAAGI,mBAAmB,CAACJ,MAAD,EAAS,CAAC7Q,gBAAD,EAAmBwR,YAAnB,EAAiCC,SAAjC,CAAT,CAA5B;AACAZ,QAAM,GAAGD,cAAc,CAACC,MAAD,EAAS,CAACa,oBAAD,EAAuBC,+BAAvB,EAAwDC,WAAxD,CAAT,CAAvB;AAEA,SAAO9G,iDAAS,CAAC/F,YAAV,CAAuB;AAACC,KAAC,EAAE,OAAJ;AAAa8C,KAAC,EAAE+I;AAAhB,GAAvB,CAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;AAYA,SAASnJ,aAAT,CAAuBmK,gBAAvB,EAAyCC,gBAAzC,EAA2D;AACzD,MAAInB,EAAE,GAAG,IAAIF,EAAJ,CAAO,WAAP,CAAT;;AAEA,MAAIoB,gBAAgB,CAAC5R,MAAjB,IAA2B,GAA/B,EAAoC;AAClC4R,oBAAgB,GAAG,OAAOA,gBAA1B;AACD;;AAED,MAAIE,SAAS,GAAGpB,EAAE,CAACqB,cAAH,CAAkBF,gBAAlB,EAAoC,KAApC,CAAhB;AACA,MAAIG,UAAU,GAAGtB,EAAE,CAACuB,aAAH,CAAiBL,gBAAjB,EAAmC,KAAnC,CAAjB;AAEA,MAAIM,YAAY,GAAGF,UAAU,CAACG,SAAX,GAAuBC,GAAvB,CAA2BN,SAAS,CAACO,UAAV,EAA3B,CAAnB;AACA,MAAIC,CAAC,GAAG,QAAQJ,YAAY,CAACK,IAAb,GAAoBC,KAApB,KAA8B,CAA9B,GAAkC,CAA1C,CAAR;AACA,MAAIjI,CAAC,GAAG2H,YAAY,CAACO,IAAb,EAAR;AACA,MAAIC,OAAO,GAAGnO,6CAAM,CAAC9D,IAAP,CAAY,CAAC6R,CAAD,CAAZ,CAAd;AACA,MAAIK,OAAO,GAAGpI,CAAC,CAACqI,WAAF,CAAcrO,6CAAd,EAAsB,IAAtB,EAA4B,EAA5B,CAAd;AAEA,MAAIsO,MAAM,GAAG3F,iDAAK,CAAC4F,EAAN,CAASD,MAAT,CAAgBE,MAAhB,EAAb;AAEAF,QAAM,CAACG,MAAP,CAAcN,OAAO,CAACzN,QAAR,CAAiB,QAAjB,CAAd;AACA4N,QAAM,CAACG,MAAP,CAAcL,OAAO,CAAC1N,QAAR,CAAiB,QAAjB,CAAd;AAEA,SAAO4N,MAAM,CAACI,MAAP,GAAgBC,KAAhB,EAAP;AACD;AAED;;;;;;;;;;AAQA,SAASjH,cAAT,CAAwBkH,MAAxB,EAAgCC,MAAhC,EAAwC;AACtC,MAAIC,GAAG,GAAGnG,iDAAK,CAACI,IAAN,CAAWgG,UAAX,CAAsBH,MAAtB,CAAV;AACA,MAAII,MAAM,GAAGhP,6CAAM,CAAC9D,IAAP,CAAY2S,MAAZ,EAAoB,KAApB,CAAb;AACA,MAAII,EAAE,GAAGtG,iDAAK,CAACI,IAAN,CAAWmG,YAAX,CAAwBF,MAAM,CAACrT,KAAP,CAAa,CAAC,EAAd,CAAxB,CAAT;AACA,MAAIwT,GAAG,GAAGxG,iDAAK,CAACI,IAAN,CAAWmG,YAAX,CAAwBF,MAAM,CAACrT,KAAP,CAAa,CAAC,EAAd,EAAkB,CAAC,EAAnB,CAAxB,CAAV;AACA,MAAMyT,QAAQ,GAAGzG,iDAAK,CAAC0G,MAAN,CAAaC,cAAb,CAA4B,SAA5B,EAAuCR,GAAvC,CAAjB;AAEAM,UAAQ,CAACjU,KAAT,CAAe;AAAC8T,MAAE,EAAEA,EAAL;AAASE,OAAG,EAAEA;AAAd,GAAf;AACAC,UAAQ,CAACX,MAAT,CACE9F,iDAAK,CAACI,IAAN,CAAWmG,YAAX,CAAwBF,MAAM,CAACrT,KAAP,CAAa,CAAb,EAAgB,CAAC,EAAjB,CAAxB,CADF;;AAGA,MAAIyT,QAAQ,CAACG,MAAT,EAAJ,EAAuB;AACrB,WAAOH,QAAQ,CAAChI,MAAT,CAAgBuH,KAAhB,EAAP;AACD;;AACD,QAAM,IAAItO,KAAJ,CAAU,yBAAV,CAAN;AACD;AAED;;;;;;;;;;;;AAUA,SAAS+C,cAAT,CAAwBwL,MAAxB,EAAgC/R,GAAhC,EAAyE;AAAA,MAApCoS,EAAoC,uEAA/BtG,iDAAK,CAACD,MAAN,CAAa8G,YAAb,CAA0B,EAA1B,CAA+B;AACvE,MAAIV,GAAG,GAAGnG,iDAAK,CAACI,IAAN,CAAWgG,UAAX,CAAsBH,MAAtB,CAAV;AACA,MAAMS,MAAM,GAAG1G,iDAAK,CAAC0G,MAAN,CAAaI,YAAb,CAA0B,SAA1B,EAAqCX,GAArC,CAAf;AAEAO,QAAM,CAAClU,KAAP,CAAa;AAAC8T,MAAE,EAAEA;AAAL,GAAb;AACAI,QAAM,CAACZ,MAAP,CAAc9F,iDAAK,CAACI,IAAN,CAAWmG,YAAX,CAAwBrS,GAAxB,CAAd;AACAwS,QAAM,CAACE,MAAP;AAEA,MAAIhV,MAAM,GAAG8U,MAAM,CAACjI,MAAP,CAAcsI,SAAd,CAAwBL,MAAM,CAACM,IAAP,CAAYR,GAApC,EAAyCS,QAAzC,CAAkDX,EAAlD,CAAb;AAEA,SAAO1U,MAAM,CAACoU,KAAP,EAAP;AACD;AAED;;;;;;;;AAMA,SAASkB,QAAT,CAAkBC,QAAlB,EAA4B;AAC1B,SAAOA,QAAQ,YAAG,EAAH,EAAO,CAAP,CAAf;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAMA,SAAS5O,QAAT,CAAkB6O,SAAlB,EAA6B;AAC3B,MAAIA,SAAS,CAACC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,KAA6B,IAAjC,EAAuC;AACrC,WAAOD,SAAS,CAACC,SAAV,CAAoB,CAApB,CAAP;AACD,GAFD,MAEO;AACL,WAAOD,SAAP;AACD;AACF;AAED;;;;;;;;AAMA,SAASE,UAAT,CAAoBF,SAApB,EAA+B;AAC7B,MAAI,EAAE,OAAOA,SAAP,KAAqB,QAArB,IAAiC,OAAOA,SAAP,IAAoB,QAAvD,CAAJ,EAAsE;AACpE,WAAO,EAAP;AACD;;AACDA,WAAS,GAAGA,SAAS,CAACrP,QAAV,GAAqBwP,OAArB,CAA6B,OAA7B,EAAsC,EAAtC,CAAZ;AACA,MAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAI7O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyO,SAAS,CAACtU,MAA9B,EAAsC6F,CAAC,IAAI,CAA3C,EAA8C;AAC5C,QAAM7C,IAAI,GAAG/D,QAAQ,CAACqV,SAAS,CAACvO,MAAV,CAAiBF,CAAjB,EAAoB,CAApB,CAAD,EAAyB,EAAzB,CAArB;;AACA,QAAI,CAAC8O,KAAK,CAAC3R,IAAD,CAAN,IAAgBA,IAAI,KAAK,CAA7B,EAAgC;AAC9B0R,WAAK,CAAC5O,IAAN,CAAW8O,MAAM,CAACC,YAAP,CAAoB7R,IAApB,CAAX;AACD;AACF;;AACD,SAAO0R,KAAK,CAACI,IAAN,CAAW,EAAX,CAAP;AACD;AAED;;;;;;;;AAMA,SAASnI,KAAT,CAAeoI,EAAf,EAAmB;AACjB,SAAO,IAAIpO,OAAJ,CAAY,UAACC,OAAD;AAAA,WAAaoO,UAAU,CAACpO,OAAD,EAAUmO,EAAV,CAAvB;AAAA,GAAZ,CAAP;AACD;AAED;;;;;;AAIA,SAASrQ,IAAT,CAAcuQ,MAAd,EAAsB;AACpB,SAAO,IAAItO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACrCqO,+CAAI,CAACxQ,IAAL,CAAUuQ,MAAV,EAAkB,UAACrS,KAAD,EAAQ9D,MAAR,EAAiB;AACjC,UAAI8D,KAAJ,EAAW;AACTiE,cAAM,CAACjE,KAAD,CAAN;AACD,OAFD,MAEO;AACLgE,eAAO,CAAC9H,MAAD,CAAP;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;AAED;;;;;;AAIA,SAASqW,MAAT,CAAgBF,MAAhB,EAAwB;AACtB,SAAO,IAAItO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCqO,+CAAI,CAACC,MAAL,CAAYF,MAAZ,EAAoB,UAACrS,KAAD,EAAQ9D,MAAR,EAAmB;AACrC,UAAI8D,KAAJ,EAAW;AACTiE,cAAM,CAACjE,KAAD,CAAN;AACD,OAFD,MAEO;AACLgE,eAAO,CAAC9H,MAAD,CAAP;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAGD,IAAIuF,KAAK,GAAG,EAAZ,C,CAEA;AACA;;AACAA,KAAK,CAAC+Q,IAAN,GAAa;AAAA,SAAM,QAAN;AAAA,CAAb,C,CACA;;;AACA/Q,KAAK,CAACC,cAAN,GAAuBA,cAAvB;AACAD,KAAK,CAAC1D,IAAN,GAAaA,IAAb;AACA0D,KAAK,CAAC6M,aAAN,GAAsBA,aAAtB;AACA7M,KAAK,CAACgN,kBAAN,GAA2BA,kBAA3B,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACAhN,KAAK,CAACoD,aAAN,GAAsBA,aAAtB;AACApD,KAAK,CAACsD,cAAN,GAAuBA,cAAvB;AACAtD,KAAK,CAAC4H,cAAN,GAAuBA,cAAvB;AACA5H,KAAK,CAAC+P,QAAN,GAAiBA,QAAjB,C,CACA;;AACA/P,KAAK,CAACoB,QAAN,GAAiBA,QAAjB;AACApB,KAAK,CAACmQ,UAAN,GAAmBA,UAAnB;AACAnQ,KAAK,CAACsI,KAAN,GAAcA,KAAd;AACAtI,KAAK,CAACK,IAAN,GAAaA,IAAb;AACAL,KAAK,CAAC8Q,MAAN,GAAeA,MAAf;AAEe9Q,oEAAf,E;;;;;;;;;;;;AC5iBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;CAEA;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACLA;AAEA;;;;IAGqB2D,I;AACnB;;;;;;;;;;;;;;;;;;;;;AAqBA,cAAYzI,MAAZ,EAAoBmI,WAApB,EAAiCE,uBAAjC,EAA0D9D,QAA1D,EAAoEC,KAApE,EAA2EsR,KAA3E,EAAkFvO,UAAlF,EAA8FV,gBAA9F,EACYE,aADZ,EAC2BW,mBAD3B,EACgDjD,MADhD,EACwD+D,WADxD,EACqE3D,KADrE,EAC4EK,OAD5E,EACqFI,WADrF,EAEYX,wBAFZ,EAEsC;AAAA;;AACpC;AACA,OAAKiE,UAAL,GAAkB9D,qDAAK,CAAC1D,IAAN,CAAW,CAAC+G,WAAD,EAAcE,uBAAd,EAC3B1D,wBAAwB,GAAGW,WAAH,GAAiBtF,MADd,EACsBuH,UADtB,CAAX,CAAlB;AAEA,OAAKvH,MAAL,GAAcA,MAAd;AACA,OAAKmI,WAAL,GAAmBA,WAAnB;AACA,OAAKE,uBAAL,GAA+BA,uBAA/B;AACA,OAAK9D,QAAL,GAAgBA,QAAhB;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKsR,KAAL,GAAaA,KAAb;AACA,OAAKvO,UAAL,GAAkBA,UAAlB;AACA,OAAKV,gBAAL,GAAwBA,gBAAxB;AACA,OAAKE,aAAL,GAAqBA,aAArB;AACA,OAAKW,mBAAL,GAA2BA,mBAA3B;AACA,OAAKjD,MAAL,GAAcA,MAAd;AACA,OAAK+D,WAAL,GAAmBA,WAAnB;AACA,OAAK3D,KAAL,GAAaA,KAAb;AACA,OAAKK,OAAL,GAAeA,OAAf;AACA,OAAKI,WAAL,GAAmBA,WAAnB;AACA,OAAKX,wBAAL,GAAgCA,wBAAhC,CAnBoC,CAqBpC;AACA;AACA;;AACA,OAAKkE,eAAL,GAAuB,EAAvB;AACA,OAAKE,MAAL,GAAc,EAAd;AACA,OAAKvH,OAAL,GAAe,EAAf;AACA,OAAK2H,SAAL,GAAiB,CAAjB;AACA,OAAKe,KAAL,GAAa,EAAb;AACA,OAAKd,mBAAL,GAA2B,CAAC,CAA5B,CA7BoC,CA+BpC;;AACA,OAAK+C,0BAAL,GAAkC,EAAlC;AACA,OAAKH,KAAL,GAAa,EAAb;AACA,OAAKK,OAAL,GAAe,EAAf;AACA,OAAKJ,eAAL,GAAuB,EAAvB;AACA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKI,aAAL,GAAqB,EAArB;AACA,OAAKE,SAAL,GAAiB,MAAjB;AAEA,OAAKC,eAAL,GAAuB,EAAvB;AACD,C;;;;;;;;;;;;;;;;;;;;;;;;;ACtEH,kC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,2C;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,sD;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,wD;;;;;;;;;;;ACAA,uC;;;;;;;;;;;ACAA,iC","file":"enigma-js.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"enigma-js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"enigma-js\"] = factory();\n\telse\n\t\troot[\"enigma-js\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import EventEmitter from 'eventemitter3';\nimport * as eeConstants from './emitterConstants';\n\n/**\n * Encapsulates the admin operations\n */\nexport default class Admin {\n  /**\n   * Constructor\n   * @param {Web3} web3 - Web3 provider for the library\n   * @param {Web3.Contract} enigmaContract - Enigma contract deployed to Ethereum\n   * @param {Web3.Contract} tokenContract - Enigma token contract deployed to Ethereum\n   * @param {Object} txDefaults\n   * @param {Enigma} enigma - Enigma wrapper instance\n   */\n  constructor(web3, enigmaContract, tokenContract, txDefaults, enigma) {\n    this.web3 = web3;\n    this.enigmaContract = enigmaContract;\n    this.tokenContract = tokenContract;\n    this.txDefaults = txDefaults;\n    this.enigma = enigma;\n  }\n\n  /**\n   * Find worker by signing address\n   *\n   * @param {string} sigAddr - The signing address\n   * @return {Promise} Resolves to worker's details\n   */\n  async findBySigningAddress(sigAddr) {\n    const result = await this.enigmaContract.methods.getWorkerFromSigningAddress(sigAddr).call();\n    return {\n      account: result[0],\n      status: parseInt(result[1][1]),\n      report: result[1][2],\n      balance: parseInt(result[1][3]),\n      logs: result[1][4],\n    };\n  }\n\n  /**\n   * Get the worker's status\n   *\n   * @param {string} account - Worker's ETH address\n   * @return {Promise} Resolves to status of worker (0=Unregistered, 1=LoggedIn, 2=LoggedOut)\n   */\n  async getWorkerStatus(account) {\n    const worker = await this.enigmaContract.methods.getWorker(account).call();\n    return parseInt(worker.status);\n  }\n\n  /**\n   * Checks if a secret contract is deployed\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} Resolves to a boolean value whether the contract has been deployed or not\n   */\n  async isDeployed(scAddr) {\n    return parseInt((await this.enigmaContract.methods.getSecretContract(scAddr).call()).status) === 1;\n  }\n\n  /**\n   * Count the number of deployed secret contracts.\n   *\n   * @return {Promise} - Resolves to number of deployed secret contracts\n   */\n  async countSecretContracts() {\n    return parseInt(await this.enigmaContract.methods.countSecretContracts().call());\n  }\n\n  /**\n   * Get the addresses of deployed secret contracts within a specified range.\n   *\n   * @param {number} start - Start index of secret contract address to retrieve (inclusive)\n   * @param {number} stop - Stop index of secret contract address to retrieve (exclusive)\n   * @return {Promise} - Resolves to the addresses of deployed secret contracts within range\n   */\n  async getSecretContractAddresses(start, stop) {\n    return (await this.enigmaContract.methods.getSecretContractAddresses(start, stop).call());\n  }\n\n  /**\n   * Get the addresses of all deployed secret contracts.\n   *\n   * @return {Promise} - Resolves to the addresses of deployed secret contracts within range\n   */\n  async getAllSecretContractAddresses() {\n    return (await this.enigmaContract.methods.getAllSecretContractAddresses().call());\n  }\n\n  /**\n   * Fetches the secret contract bytecode hash\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} - Resolves to the bytecode hash of the deployed secret contract\n   */\n  async getCodeHash(scAddr) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).codeHash;\n  }\n\n  /**\n   * Count the state deltas for the specified secret contract.\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} - Resolves to count of state deltas\n   */\n  async countStateDeltas(scAddr) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.length;\n  }\n\n  /**\n   * Fetch the state delta hash at the specified index position\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {number} index - Index of state delta hash to retrieve\n   * @return {Promise} - Resolves to state delta hash at the specified position\n   */\n  async getStateDeltaHash(scAddr, index) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes[index];\n  }\n\n  /**\n   * Fetch state delta hashes in the specified range\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {number} start - Start index of state delta hash to retrieve (inclusive)\n   * @param {number} stop - Stop index of state delta hash to retrieve (exclusive)\n   * @return {Promise} - Resolves to the state delta hashes in the specified range\n   */\n  async getStateDeltaHashes(scAddr, start, stop) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.slice(start, stop);\n  }\n\n  /**\n   * Check that the specified state delta hash is valid.\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {string} stateDeltaHash - State delta hash for a given task\n   * @return {Promise} Resolves to boolean value for whether the state delta hash is valid\n   */\n  async isValidDeltaHash(scAddr, stateDeltaHash) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.includes(\n      stateDeltaHash);\n  }\n\n  /**\n   * Login the selected worker\n   *\n   * @param {string} account - ETH address for worker being logged in\n   * @return {EventEmitter} EventEmitter to be listened to track login transaction\n   */\n  login(account) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.login().send({from: account}).on('transactionHash', (hash) => {\n          emitter.emit(eeConstants.LOGIN_TRANSACTION_HASH, hash);\n        }).on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.LOGIN_CONFIRMATION, confirmationNumber, receipt);\n        }).on('receipt', (receipt) => {\n          emitter.emit(eeConstants.LOGIN_RECEIPT, receipt);\n        });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Logout the selected worker\n   *\n   * @param {string} account - ETH address for worker being logged out\n   * @return {EventEmitter} EventEmitter to be listened to track logout transaction\n   */\n  logout(account) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.logout().send({from: account}).on('transactionHash', (hash) => {\n          emitter.emit(eeConstants.LOGOUT_TRANSACTION_HASH, hash);\n        }).on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.LOGOUT_CONFIRMATION, confirmationNumber, receipt);\n        }).on('receipt', (receipt) => {\n          emitter.emit(eeConstants.LOGOUT_RECEIPT, receipt);\n        });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Deposit ENG tokens in the worker's bank. Worker must be registered prior to this.\n   *\n   * @param {string} account - Worker's ETH address\n   * @param {number} amount - Number of ENG tokens to deposit, in grains (10**8 multiplier) format\n   * @return {EventEmitter} EventEmitter to be listened to track deposit transaction\n   */\n  deposit(account, amount) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const balance = await this.tokenContract.methods.balanceOf(account).call();\n      if (balance < amount) {\n        const msg = 'Not enough tokens in wallet';\n        emitter.emit('error', {\n          name: 'NotEnoughTokens',\n          message: msg,\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, amount).send({from: account});\n      try {\n        const receipt = await this.enigmaContract.methods.deposit(account, amount).\n          send({from: account}).\n          on('transactionHash', (hash) => {\n            emitter.emit(eeConstants.DEPOSIT_TRANSACTION_HASH, hash);\n          }).\n          on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.DEPOSIT_CONFIRMATION, confirmationNumber, receipt);\n          });\n        emitter.emit(eeConstants.DEPOSIT_RECEIPT, receipt);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Withdraw ENG tokens from the worker's bank. Worker must be in the logged out state and cannot withdraw in the\n   * same epoch as logging out.\n   *\n   * @param {string} account - Worker's ETH address\n   * @param {number} amount - Number of ENG tokens to deposit, in grains (10**8 multiplier) format\n   * @return {EventEmitter} EventEmitter to be listened to track deposit transaction\n   */\n  withdraw(account, amount) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.withdraw(amount).\n          send({from: account}).\n          on('transactionHash', (hash) => {\n            emitter.emit(eeConstants.WITHDRAW_TRANSACTION_HASH, hash);\n          }).\n          on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.WITHDRAW_CONFIRMATION, confirmationNumber, receipt);\n          }).\n          on('receipt', (receipt) => {\n            emitter.emit(eeConstants.WITHDRAW_RECEIPT, receipt);\n          });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get token balance for worker\n   *\n   * @param {string} account - Worker's ETH address\n   * @return {Promise} Resolves to ENG token balance in grains (10**8 multiplier) format\n   */\n  async getBalance(account) {\n    return parseInt((await this.enigmaContract.methods.getWorker(account).call()).balance);\n  }\n\n  /**\n   * Get worker's signer address\n   *\n   * @param {string} account - Worker's ETH address\n   * @return {Promise} Resolves to worker's signer address\n   */\n  async getWorkerSignerAddr(account) {\n    return (await this.enigmaContract.methods.getWorker(account).call()).signer;\n  }\n}\n","/* eslint-disable prefer-spread,prefer-rest-params,valid-jsdoc */\nimport EnigmaContract from '../../build/contracts/Enigma';\nimport EnigmaTokenContract from '../../build/contracts/EnigmaToken';\nimport Admin from './Admin';\nimport Task from './models/Task';\nimport EventEmitter from 'eventemitter3';\nimport web3Utils from 'web3-utils';\nimport jaysonBrowserClient from 'jayson/lib/client/browser';\nimport axios from 'axios';\nimport utils from './enigma-utils';\nimport forge from 'node-forge';\nimport JSBI from 'jsbi';\nimport * as abi from 'ethereumjs-abi';\nimport EthCrypto from 'eth-crypto';\nimport * as eeConstants from './emitterConstants';\n\n/**\n * Class encapsulation the Enigma operations.\n */\nexport default class Enigma {\n  /**\n   * The Enigma JS library constructor - a wrapper for Ethereum's Web3 library, offering additional services to\n   * leverage the Enigma protocol's unique features.\n   *\n   * @param {Web3} web3 - Web3 provider for the library\n   * @param {string} enigmaContractAddr - Address the Enigma contract is deployed to on Ethereum\n   * @param {string} tokenContractAddr - Address the Enigma token contract is deployed to on Ethereum\n   * @param {string} rpcAddr - Enigma p2p network address for RPC calls\n   * @param {Object} txDefaults\n   */\n  constructor(web3, enigmaContractAddr, tokenContractAddr, rpcAddr, txDefaults = {}) {\n    this.web3 = web3;\n    this.txDefaults = txDefaults;\n    // axios callback for jayson rpc client to interface with ENG network\n    let callServer = function(request, callback) {\n      let config = {\n        headers: {\n          'Content-Type': 'application/json',\n          'credentials': 'include',\n        },\n      };\n      axios.post(rpcAddr, JSON.parse(request), config).then((response) => {\n        if (eeConstants.ERROR in response.data) {\n          callback(response.data.error, null);\n        } else {\n          let text = JSON.stringify(response.data.result);\n          callback(null, text);\n        }\n      }).catch(function(err) {\n        callback({code: -32000, message: err.message}, null);\n      });\n    };\n    this.client = jaysonBrowserClient(callServer, {});\n    this.workerParamsCache = {};\n    this.selectedWorkerGroupCache = {};\n    this.taskKeyLocalStorage = {};\n    this.createContracts(enigmaContractAddr, tokenContractAddr);\n  }\n\n  /**\n   * Initialize the worker-specific admin features\n   */\n  admin() {\n    this.admin = new Admin(this.web3, this.enigmaContract, this.tokenContract, this.txDefaults, this);\n  }\n\n  /**\n   * Initialize the Enigma and Enigma token contracts\n   *\n   * @param {string} enigmaContractAddr - Address the Enigma contract is deployed to on Ethereum\n   * @param {string} tokenContractAddr - Address the Enigma token contract is deployed to on Ethereum\n   */\n  createContracts(enigmaContractAddr, tokenContractAddr) {\n    this.enigmaContract = new this.web3.eth.Contract(EnigmaContract['abi'],\n      enigmaContractAddr, this.txDefaults);\n    this.tokenContract = new this.web3.eth.Contract(EnigmaTokenContract['abi'],\n      tokenContractAddr, this.txDefaults);\n  }\n\n  /**\n   * Create a base Task - a wrapper for a task (either contract deployments or compute tasks)\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string/Buffer} scAddrOrPreCode - Either secret contract address (string) or precode (Buffer), depending\n   * on if user is running a contract deployment or compute task\n   * @param {boolean} isContractDeploymentTask - Is this task a contract deployment task (if not, it's a compute task)\n   * @returns {EventEmitter} EventEmitter to be listened to track creation of task. Emits a Task with base attributes\n   * to be used for remainder of task lifecycle\n   */\n  createTask(fn, args, gasLimit, gasPx, sender, scAddrOrPreCode, isContractDeploymentTask) {\n    let emitter = new EventEmitter();\n    (async () => {\n      // TODO: never larger that 53-bit?\n      const nonce = parseInt(await this.enigmaContract.methods.getUserTaskDeployments(sender).call());\n      const scAddr = isContractDeploymentTask ? utils.generateScAddr(sender, nonce) : scAddrOrPreCode;\n      let preCode;\n      let preCodeGzip;\n      if (isContractDeploymentTask) {\n        if (Buffer.isBuffer(scAddrOrPreCode)) {\n          preCode = scAddrOrPreCode;\n          // gzip the preCode\n          preCodeGzip = await utils.gzip(preCode);\n        } else {\n          throw Error('PreCode expected to be a Buffer, instead got '+typeof scAddrOrPreCode);\n        }\n      } else {\n        preCode = '';\n        preCodeGzip = '';\n      }\n\n      const preCodeHash = isContractDeploymentTask ?\n        this.web3.utils.soliditySha3({t: 'bytes', value: preCode.toString('hex')}) : '';\n      const argsTranspose = (args === undefined || args.length === 0) ? [[], []] :\n        args[0].map((col, i) => args.map((row) => row[i]));\n      const abiEncodedArgs = utils.remove0x(this.web3.eth.abi.encodeParameters(argsTranspose[1], argsTranspose[0]));\n      let abiEncodedArgsArray = [];\n      for (let n = 0; n < abiEncodedArgs.length; n += 2) {\n        abiEncodedArgsArray.push(parseInt(abiEncodedArgs.substr(n, 2), 16));\n      }\n      const blockNumber = await this.web3.eth.getBlockNumber();\n      const workerParams = await this.getWorkerParams(blockNumber);\n      const firstBlockNumber = workerParams.firstBlockNumber;\n      let workerAddress = await this.selectWorkerGroup(scAddr, workerParams, 1)[0]; // TODO: tmp fix 1 worker\n      workerAddress = workerAddress.toLowerCase().slice(-40); // remove leading '0x' if present\n      const {publicKey, privateKey} = this.obtainTaskKeyPair();\n      try {\n        const getWorkerEncryptionKeyResult = await new Promise((resolve, reject) => {\n          this.client.request('getWorkerEncryptionKey',\n            {workerAddress: workerAddress, userPubKey: publicKey}, (err, response) => {\n              if (err) {\n                reject(err);\n                return;\n              }\n              resolve(response);\n            });\n        });\n        const {result, id} = getWorkerEncryptionKeyResult;\n        const {workerEncryptionKey, workerSig} = result;\n\n        // The signature of the workerEncryptionKey is generated\n        // concatenating the following elements in a bytearray:\n        // len('Enigma User Message') + b'Enigma User Message' + len(workerEncryptionKey) + workerEncryptionKey\n        // Because the first 3 elements are constant, they are hardcoded as follows:\n        // len('Enigma User Message') as a uint64 => 19 in hex => 0000000000000013\n        // bytes of 'Enigma User Message' in hex => 456e69676d612055736572204d657373616765\n        // len(workerEncryptionKey) as a unit64 => 64 in hex => 0000000000000040\n        const hexToVerify = '0x0000000000000013456e69676d612055736572204d6573736167650000000000000040' +\n          workerEncryptionKey;\n\n        // the hashing function soliditySha3 expects hex instead of bytes\n        let recAddress = EthCrypto.recover('0x'+workerSig,\n          this.web3.utils.soliditySha3({t: 'bytes', value: hexToVerify}));\n\n        recAddress = recAddress.toLowerCase().slice(-40); // remove leading '0x' if present\n\n        if (workerAddress !== recAddress) {\n          console.error('Worker address', workerAddress, '!= recovered address', recAddress);\n          emitter.emit(eeConstants.ERROR, {\n            name: 'InvalidWorker',\n            message: `Invalid worker encryption key + signature combo ${workerAddress} != ${recAddress}`,\n          });\n        } else {\n          // Generate derived key from worker's encryption key and user's private key\n          const derivedKey = utils.getDerivedKey(workerEncryptionKey, privateKey);\n          // Encrypt function and ABI-encoded args\n          const encryptedFn = utils.encryptMessage(derivedKey, fn);\n          const encryptedAbiEncodedArgs = utils.encryptMessage(derivedKey, Buffer.from(abiEncodedArgsArray));\n          const msg = this.web3.utils.soliditySha3(\n            {t: 'bytes', v: encryptedFn},\n            {t: 'bytes', v: encryptedAbiEncodedArgs},\n          );\n          const userTaskSig = await this.web3.eth.sign(msg, sender);\n          emitter.emit(eeConstants.CREATE_TASK, new Task(scAddr, encryptedFn, encryptedAbiEncodedArgs, gasLimit, gasPx,\n            id, publicKey, firstBlockNumber, workerAddress, workerEncryptionKey, sender, userTaskSig, nonce,\n            preCodeGzip.toString('base64'), preCodeHash, isContractDeploymentTask));\n        }\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create and store a task record on chain (ETH). Task records are necessary for collecting the ENG computation fee\n   * and computing the immutable taskId (a unique value for each task computed from hash(user's ETH address, user's\n   * nonce value monotonically increasing for every task deployment). Thus, task records have important implications for\n   * task ordering, fee payments, and verification.\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @returns {EventEmitter} EventEmitter to be listened to track creation of task record. Emits a Task with task\n   * record creation attributes to be used for remainder of task lifecycle\n   */\n  createTaskRecord(task) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const balance = await this.tokenContract.methods.balanceOf(task.sender).call();\n      if (balance < (task.gasLimit * task.gasPx)) {\n        emitter.emit(eeConstants.ERROR, {\n          name: 'NotEnoughTokens',\n          message: 'Not enough tokens to pay the fee',\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, task.gasLimit * task.gasPx).send({\n        from: task.sender,\n      });\n      try {\n        const receipt = task.isContractDeploymentTask ?\n          await this.enigmaContract.methods.createDeploymentTaskRecord(task.inputsHash, task.gasLimit,\n            task.gasPx, task.firstBlockNumber, task.nonce).send({\n            from: task.sender,\n          }).on('transactionHash', (hash) => {\n            task.transactionHash = hash;\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_TRANSACTION_HASH, hash);\n          }).on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_CONFIRMATION, confirmationNumber, receipt);\n          })\n          :\n          await this.enigmaContract.methods.createTaskRecord(task.inputsHash, task.gasLimit, task.gasPx,\n            task.firstBlockNumber).send({\n            from: task.sender,\n          }).on('transactionHash', (hash) => {\n            task.transactionHash = hash;\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_TRANSACTION_HASH, hash);\n          }).on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_CONFIRMATION, confirmationNumber, receipt);\n          });\n        task.taskId = receipt.events.TaskRecordCreated.returnValues.taskId;\n        task.receipt = receipt;\n        task.ethStatus = 1;\n        task.creationBlockNumber = receipt.blockNumber;\n        emitter.emit(eeConstants.CREATE_TASK_RECORD_RECEIPT, receipt);\n        emitter.emit(eeConstants.CREATE_TASK_RECORD, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create and store task records on chain (ETH). Task records are necessary for collecting the ENG computation fee\n   * and computing the immutable taskId (a unique value for each task computed from hash(user's ETH address, user's\n   * nonce value monotonically increasing for every task deployment). Thus, task records have important implications for\n   * task ordering, fee payments, and verification.\n   *\n   * @param {Array} tasks - Task wrappers for contract deployment and compute tasks\n   * @returns {EventEmitter} EventEmitter to be listened to track creation of task records. Emits Tasks with task\n   * record creation attributes to be used for remainder of task lifecycle\n   */\n  createTaskRecords(tasks) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const inputsHashes = tasks.map((task) => task.inputsHash);\n      const gasLimits = tasks.map((task) => task.gasLimit);\n      const gasPxs = tasks.map((task) => task.gasPx);\n      const fees = tasks.map((task) => task.gasLimit * task.gasPx);\n      const balance = await this.tokenContract.methods.balanceOf(tasks[0].sender).call();\n      const totalFees = fees.reduce((a, b) => a + b, 0);\n      if (balance < totalFees) {\n        emitter.emit(eeConstants.ERROR, {\n          name: 'NotEnoughTokens',\n          message: 'Not enough tokens to pay the fee',\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, totalFees).send({\n        from: tasks[0].sender,\n      });\n      await this.enigmaContract.methods.createTaskRecords(inputsHashes, gasLimits, gasPxs, tasks[0].firstBlockNumber).\n        send({\n          from: tasks[0].sender,\n        }).\n        on('transactionHash', (hash) => {\n          for (let i = 0; i < tasks.length; i++) {\n            tasks[i].transactionHash = hash;\n          }\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_TRANSACTION_HASH, hash);\n        }).\n        on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_CONFIRMATION, confirmationNumber, receipt);\n        }).\n        then((receipt) => {\n          const taskIds = receipt.events.TaskRecordsCreated.returnValues.taskIds;\n          for (let i = 0; i < tasks.length; i++) {\n            tasks[i].taskId = taskIds[i];\n            tasks[i].receipt = receipt;\n            tasks[i].ethStatus = 1;\n            tasks[i].creationBlockNumber = receipt.blockNumber;\n          }\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_RECEIPT, receipt);\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS, tasks);\n        });\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get the Task's task record status from Ethereum\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {Promise} Resolves to Task wrapper with updated ethStatus and proof properties\n   */\n  async getTaskRecordStatus(task) {\n    const result = await this.enigmaContract.methods.getTaskRecord(task.taskId).call();\n    task.ethStatus = parseInt(result.status);\n    task.proof = result.proof;\n    return task;\n  }\n\n  /**\n   * Fetch output hash for a given task\n   *\n   * @param {Task} task - Task wrapper\n   * @return {Promise} - Resolves to output hash for the task\n   */\n  async getTaskOutputHash(task) {\n    return (await this.enigmaContract.methods.getTaskRecord(task.taskId).call()).outputHash;\n  }\n\n  /**\n   * Find SGX report\n   *\n   * @param {string} custodian - Worker's address\n   * @return {Promise} Resolves to SGX report for the worker\n   */\n  async getReport(custodian) {\n    return await this.enigmaContract.methods.getReport(custodian).call();\n  }\n\n  /**\n   * Given a block number, obtain the worker parameters. These parameters remain the same for a given secret\n   * contract and epoch (fixed number of blocks). These parameters are cached until the epoch changes.\n   *\n   * @param {int} blockNumber - Block number of task record's mining\n   * @return {Promise} Resolves to the worker params, which includes a seed (random int generated from the principal\n   * node), first block number for the epoch, list of active work addresses (ordered list of worker signing addresses\n   * that were logged in at the start of the epoch), and list of active worker balances\n   */\n  async getWorkerParams(blockNumber) {\n    if ((Object.keys(this.workerParamsCache).length === 0) ||\n      (blockNumber - this.workerParamsCache.firstBlockNumber >= this.epochSize)) {\n      this.epochSize = await this.enigmaContract.methods.getEpochSize().call();\n      const getWorkerParamsResult = await this.enigmaContract.methods.getWorkerParams(blockNumber).call();\n      this.workerParamsCache = {\n        firstBlockNumber: parseInt(getWorkerParamsResult[0]),\n        seed: JSBI.BigInt(getWorkerParamsResult[1]),\n        workers: getWorkerParamsResult[2],\n        stakes: getWorkerParamsResult[3].map((x) => JSBI.BigInt(x)),\n      };\n    }\n    return this.workerParamsCache;\n  }\n\n  /**\n   * Select the workers weighted-randomly based on the staked token amount that will run the computation task\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {Object} params - Worker params (epoch first block number, seed, worker signing addresses, worker stakes)\n   * @param {number} workerGroupSize - Number of workers to be selected for task\n   * @return {Array} An array of selected workers where each selected worker is chosen with probability equal to\n   * number of staked tokens\n   */\n  selectWorkerGroup(scAddr, params, workerGroupSize = 5) {\n    // Find total number of staked tokens for workers\n    let tokenCpt = params.stakes.reduce((a, b) => JSBI.add(a, b), JSBI.BigInt(0));\n    let nonce = 0;\n    let selectedWorkers = [];\n    do {\n      // Unique hash for epoch, secret contract address, and nonce\n      const msg = abi.rawEncode(\n        ['uint256', 'bytes32', 'uint256'],\n        [params.seed.toString(10), scAddr, nonce],\n      );\n      const hash = web3Utils.keccak256(msg);\n      // Find random number between [0, tokenCpt)\n      let randVal = JSBI.remainder(JSBI.BigInt(hash), tokenCpt);\n      let selectedWorker = params.workers[params.workers.length - 1];\n      // Loop through each worker, subtracting worker's balance from the random number computed above. Once the\n      // decrementing randVal becomes negative, add the worker whose balance caused this to the list of selected\n      // workers. If worker has already been selected, increase nonce by one, resulting in a new hash computed above.\n      for (let i = 0; i < params.workers.length; i++) {\n        randVal = JSBI.subtract(randVal, params.stakes[i]);\n        if (randVal <= 0) {\n          selectedWorker = params.workers[i];\n          break;\n        }\n      }\n      if (!selectedWorkers.includes(selectedWorker)) {\n        selectedWorkers.push(selectedWorker);\n      }\n      nonce++;\n    }\n    while (selectedWorkers.length < workerGroupSize);\n    return selectedWorkers;\n  }\n\n  /**\n   * Send Task to Enigma p2p network for computation\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {EventEmitter} EventEmitter to be listened to track submission of Task to Enigma p2p network. Emits\n   * a response from the ENG network indicating whether client is ready to track the remainder of the task lifecycle\n   */\n  sendTaskInput(task) {\n    let emitter = new EventEmitter();\n    (async () => {\n      let rpcEndpointName = 'sendTaskInput';\n      let emitName = eeConstants.SEND_TASK_INPUT_RESULT;\n      if (task.isContractDeploymentTask) {\n        rpcEndpointName = 'deploySecretContract';\n        emitName = eeConstants.DEPLOY_SECRET_CONTRACT_RESULT;\n      }\n      try {\n        await new Promise((resolve, reject) => {\n          this.client.request(rpcEndpointName, Enigma.serializeTask(task), (err, response) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve(response);\n          });\n        });\n        emitter.emit(emitName, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get task result from p2p network\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {EventEmitter} EventEmitter to be listened to track getting result from Enigma network. Emits\n   * a response from the ENG network.\n   */\n  getTaskResult(task) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        const getTaskResultResult = await new Promise((resolve, reject) => {\n          this.client.request('getTaskResult', {taskId: utils.remove0x(task.taskId)}, (err, response) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve(response);\n          });\n        });\n        if (getTaskResultResult.result) {\n          switch (getTaskResultResult.result.status) {\n            case 'SUCCESS':\n              task.delta = getTaskResultResult.result.delta;\n              task.ethereumPayload = getTaskResultResult.result.ethereumPayload;\n              task.ethereumAddress = getTaskResultResult.result.ethereumAddress;\n              task.preCodeHash = getTaskResultResult.result.preCodeHash;\n            case 'FAILED':\n              task.encryptedAbiEncodedOutputs = getTaskResultResult.result.output;\n              task.usedGas = getTaskResultResult.result.usedGas;\n              task.workerTaskSig = getTaskResultResult.result.signature;\n            case 'UNVERIFIED':\n            case 'INPROGRESS':\n              task.engStatus = getTaskResultResult.result.status;\n              break;\n            default:\n              throw (new Error('Invalid task result status')).message;\n          }\n        } else {\n          task.engStatus = null;\n        }\n        emitter.emit(eeConstants.GET_TASK_RESULT_RESULT, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Decrypt task result\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {Task} Task result wrapper with an updated decrypted output attribute\n   */\n  async decryptTaskResult(task) {\n    const {privateKey} = this.obtainTaskKeyPair();\n    const derivedKey = utils.getDerivedKey(task.workerEncryptionKey, privateKey);\n    task.decryptedOutput = utils.decryptMessage(derivedKey, task.encryptedAbiEncodedOutputs);\n    return task;\n  }\n\n  /**\n   * Generator function for polling the Enigma p2p network for task status\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @param {boolean} withResult - Task wrapper for contract deployment and compute tasks\n   */\n  * pollTaskStatusGen(task, withResult) {\n    while (true) {\n      yield new Promise((resolve, reject) => {\n        this.client.request('getTaskStatus', {\n          taskId: utils.remove0x(task.taskId), workerAddress: task.workerAddress,\n          withResult: withResult,\n        }, (err, response) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          task.engStatus = response.result.status;\n          if (withResult) {\n            task.encryptedAbiEncodedOutputs = response.result.output;\n          }\n          resolve(task);\n        });\n      });\n    }\n  }\n\n  /**\n   * Inner poll status function that continues to poll the Enigma p2p network until the task has been verified\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @param {pollTaskStatusGen} generator - Generator function for polling Enigma p2p network for task status\n   * @param {EventEmitter} emitter - EventEmitter to track Enigma p2p network polling for Task status\n   */\n  innerPollTaskStatus(task, generator, emitter) {\n    let p = generator.next();\n    p.value.then((d) => {\n      emitter.emit(eeConstants.POLL_TASK_STATUS_RESULT, d);\n      if (d.engStatus !== 'SUCCESS' && d.engStatus !== 'FAILED') {\n        this.innerPollTaskStatus(task, generator, emitter);\n      }\n    }).catch((err) => {\n      emitter.emit(eeConstants.ERROR, err);\n    });\n  }\n\n  /**\n   * Poll the Enigma p2p network for a TaskInput's status\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @param {boolean} withResult - Task wrapper for contract deployment and compute tasks\n   * @return {EventEmitter} EventEmitter to be listened to track polling the Enigma p2p network for a Task status.\n   * Emits a Task with task result attributes\n   */\n  pollTaskStatus(task, withResult = false) {\n    let emitter = new EventEmitter();\n    let generator = this.pollTaskStatusGen(task, withResult);\n    this.innerPollTaskStatus(task, generator, emitter);\n    return emitter;\n  }\n\n  /**\n   * Poll the ETH for a Task's status\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @param {Number} interval - Polling interval in ms\n   * @return {Task} Task wrapper with updated ETH status.\n   */\n  async pollTaskETH(task, interval=1000) {\n    while (task.ethStatus === 1) {\n      task = await this.getTaskRecordStatus(task);\n      await utils.sleep(interval);\n    }\n    return task;\n  }\n\n  /**\n   * Serialize Task for submission to the Enigma p2p network depending on whether it is a deployment or compute task\n   *\n   * @param {Task} task - Task wrapper for contract deployment or compute task\n   * @return {Object} Serialized Task for submission to the Enigma p2p network\n   */\n  static serializeTask(task) {\n    return task.isContractDeploymentTask ? {\n      preCode: task.preCode,\n      encryptedArgs: utils.remove0x(task.encryptedAbiEncodedArgs), encryptedFn: utils.remove0x(task.encryptedFn),\n      userDHKey: utils.remove0x(task.userPubKey), contractAddress: utils.remove0x(task.scAddr),\n      workerAddress: task.workerAddress,\n    } : {\n      taskId: utils.remove0x(task.taskId), workerAddress: task.workerAddress,\n      encryptedFn: utils.remove0x(task.encryptedFn), encryptedArgs: utils.remove0x(task.encryptedAbiEncodedArgs),\n      contractAddress: utils.remove0x(task.scAddr), userDHKey: utils.remove0x(task.userPubKey),\n    };\n  }\n\n  /**\n   * Deterministically generate a key-secret pair necessary for deriving a shared encryption key with the selected\n   * worker. This pair will be stored in local storage for quick retrieval.\n   *\n   * @return {Object} Public key-private key pair\n   */\n  obtainTaskKeyPair() {\n    // TODO: Developer tool to allow users to select their own unique passphrase to generate private key\n    const isBrowser = typeof window !== 'undefined';\n    let privateKey;\n    let encodedPrivateKey = isBrowser ? window.localStorage.getItem('encodedPrivateKey') :\n      this.taskKeyLocalStorage['encodedPrivateKey'];\n    if (encodedPrivateKey == null) {\n      let random = forge.random.createInstance();\n      // TODO: Query user for passphrase\n      random.seedFileSync = function(needed) {\n        return forge.util.fillString('cupcake', needed);\n      };\n      privateKey = forge.util.bytesToHex(random.getBytes(32));\n      isBrowser ? window.localStorage.setItem('encodedPrivateKey', btoa(privateKey)) :\n        this.taskKeyLocalStorage['encodedPrivateKey'] = Buffer.from(privateKey, 'binary').toString('base64');\n    } else {\n      privateKey = isBrowser ? atob(encodedPrivateKey) : Buffer.from(encodedPrivateKey, 'base64').toString('binary');\n    }\n    let publicKey = EthCrypto.publicKeyByPrivateKey(privateKey);\n    return {publicKey, privateKey};\n  }\n\n  /**\n   * Create a task to deploy a secret contract - creates base task, creates task record, and sends task to the\n   * Enigma network. This is the most efficient and likely most common method for creating and deploying a secret\n   * contract.\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string} preCode - Precode for contract deployment\n   * @param {Number} maxRetries - Max number of retries if submitted around epoch change\n   * @return {Task} Task with attributes necessary for task record and Enigma network\n   */\n  deploySecretContract(fn, args, gasLimit, gasPx, sender, preCode, maxRetries=1) {\n    let emitter = new EventEmitter();\n    (async () => {\n      let retryCount = 0;\n      while (true) {\n        try {\n          let scTask = await new Promise((resolve, reject) => {\n            this.createTask(fn, args, gasLimit, gasPx, sender, preCode, true).\n            on(eeConstants.CREATE_TASK, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.CREATE_TASK, scTask);\n          scTask = await new Promise((resolve, reject) => {\n            this.createTaskRecord(scTask).\n            on(eeConstants.CREATE_TASK_RECORD, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.CREATE_TASK_RECORD, scTask);\n          await new Promise((resolve, reject) => {\n            this.sendTaskInput(scTask).\n            on(eeConstants.DEPLOY_SECRET_CONTRACT_RESULT, (receipt) => resolve(receipt)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.DEPLOY_SECRET_CONTRACT_RESULT, scTask);\n          break;\n        } catch (err) {\n          if ((retryCount++ >= maxRetries) ||\n            (err !== 'Returned error: VM Exception while processing transaction: revert Wrong epoch for this task')) {\n            emitter.emit(eeConstants.ERROR, err);\n            break;\n          }\n        }\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create a compute task - creates base task, creates task record, and sends task to the Enigma network. This is the\n   * most efficient and likely most common method for creating and sending a compute task.\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string} scAddr - Secret contract address\n   * @param {Number} maxRetries - Max number of retries if submitted around epoch change\n   * @return {Task} Task with attributes necessary for task record and Enigma network\n   */\n  computeTask(fn, args, gasLimit, gasPx, sender, scAddr, maxRetries=1) {\n    let emitter = new EventEmitter();\n    (async () => {\n      let retryCount = 0;\n      while (true) {\n        try {\n          let task = await new Promise((resolve, reject) => {\n            this.createTask(fn, args, gasLimit, gasPx, sender, scAddr, false).\n            on(eeConstants.CREATE_TASK, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.CREATE_TASK, task);\n          task = await new Promise((resolve, reject) => {\n            this.createTaskRecord(task).\n            on(eeConstants.CREATE_TASK_RECORD, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.CREATE_TASK_RECORD, task);\n          await new Promise((resolve, reject) => {\n            this.sendTaskInput(task).\n            on(eeConstants.SEND_TASK_INPUT_RESULT, (receipt) => resolve(receipt)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.SEND_TASK_INPUT_RESULT, task);\n          break;\n        } catch (err) {\n          if ((retryCount++ >= maxRetries) ||\n            (err !== 'Returned error: VM Exception while processing transaction: revert Wrong epoch for this task')) {\n            emitter.emit(eeConstants.ERROR, err);\n            break;\n          }\n        }\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Return the version number of the library\n   *\n   * @return {string}\n   */\n  static version() {\n    return '0.0.1';\n  }\n}\n","export const ERROR = 'error';\nexport const DEPOSIT_TRANSACTION_HASH = 'depositTransactionHash';\nexport const DEPOSIT_CONFIRMATION = 'depositConfirmation';\nexport const DEPOSIT_RECEIPT = 'depositReceipt';\nexport const WITHDRAW_TRANSACTION_HASH = 'withdrawTransactionHash';\nexport const WITHDRAW_CONFIRMATION = 'withdrawConfirmation';\nexport const WITHDRAW_RECEIPT = 'withdrawReceipt';\nexport const LOGIN_TRANSACTION_HASH = 'loginTransactionHash';\nexport const LOGIN_CONFIRMATION = 'loginConfirmation';\nexport const LOGIN_RECEIPT = 'loginReceipt';\nexport const LOGOUT_TRANSACTION_HASH = 'logoutTransactionHash';\nexport const LOGOUT_CONFIRMATION = 'logoutConfirmation';\nexport const LOGOUT_RECEIPT = 'logoutReceipt';\n\nexport const DEPLOY_SC_ADDR_RESULT = 'deploySCAddrResult';\nexport const DEPLOY_SC_ETH_TRANSACTION_HASH = 'deploySCEthTransactionHash';\nexport const DEPLOY_SC_ETH_CONFIRMATION = 'deploySCEthConfirmation';\nexport const DEPLOY_SC_ETH_RECEIPT = 'deploySCEthReceipt';\nexport const DEPLOY_SC_ENG_RECEIPT = 'deploySCEngReceipt';\n\nexport const CREATE_TASK = 'createTask';\nexport const CREATE_TASK_INPUT = 'createTaskInput';\nexport const CREATE_TASK_RECORD_TRANSACTION_HASH = 'createTaskRecordTransactionHash';\nexport const CREATE_TASK_RECORD_CONFIRMATION = 'createTaskRecordConfirmation';\nexport const CREATE_TASK_RECORD_RECEIPT = 'createTaskRecordReceipt';\nexport const CREATE_TASK_RECORD = 'createTaskRecord';\nexport const CREATE_TASK_RECORDS_TRANSACTION_HASH = 'createTaskRecordsTransactionHash';\nexport const CREATE_TASK_RECORDS_CONFIRMATION = 'createTaskRecordsConfirmation';\nexport const CREATE_TASK_RECORDS_RECEIPT = 'createTaskRecordsReceipt';\nexport const CREATE_TASK_RECORDS = 'createTaskRecords';\n\nexport const SEND_TASK_INPUT_RESULT = 'sendTaskInputResult';\nexport const POLL_TASK_STATUS_RESULT = 'pollTaskStatusResult';\nexport const GET_TASK_RESULT_RESULT = 'getTaskResultResult';\nexport const DEPLOY_SECRET_CONTRACT_RESULT = 'deploySecretContractResult';\n\nexport const POLL_TASK_ETH_RESULT = 'pollTaskETHResult';\n","import JSBI from 'jsbi';\nimport web3Utils from 'web3-utils';\n// import RLP from 'rlp';\nimport forge from 'node-forge';\nimport elliptic from 'elliptic';\nimport {Buffer} from 'buffer';\nimport zlib from 'zlib';\n\nforge.options.usePureJavaScript = true;\n\nconst EC = elliptic.ec;\n\n// const pki = forge.pki;\n\n// const INTEL_CA = '-----BEGIN CERTIFICATE-----\\n' +\n//   'MIIFSzCCA7OgAwIBAgIJANEHdl0yo7CUMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNV\\n' +\n//   'BAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwLU2FudGEgQ2xhcmExGjAYBgNV\\n' +\n//   'BAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQDDCdJbnRlbCBTR1ggQXR0ZXN0\\n' +\n//   'YXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwIBcNMTYxMTE0MTUzNzMxWhgPMjA0OTEy\\n' +\n//   'MzEyMzU5NTlaMH4xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwL\\n' +\n//   'U2FudGEgQ2xhcmExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQD\\n' +\n//   'DCdJbnRlbCBTR1ggQXR0ZXN0YXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwggGiMA0G\\n' +\n//   'CSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCfPGR+tXc8u1EtJzLA10Feu1Wg+p7e\\n' +\n//   'LmSRmeaCHbkQ1TF3Nwl3RmpqXkeGzNLd69QUnWovYyVSndEMyYc3sHecGgfinEeh\\n' +\n//   'rgBJSEdsSJ9FpaFdesjsxqzGRa20PYdnnfWcCTvFoulpbFR4VBuXnnVLVzkUvlXT\\n' +\n//   'L/TAnd8nIZk0zZkFJ7P5LtePvykkar7LcSQO85wtcQe0R1Raf/sQ6wYKaKmFgCGe\\n' +\n//   'NpEJUmg4ktal4qgIAxk+QHUxQE42sxViN5mqglB0QJdUot/o9a/V/mMeH8KvOAiQ\\n' +\n//   'byinkNndn+Bgk5sSV5DFgF0DffVqmVMblt5p3jPtImzBIH0QQrXJq39AT8cRwP5H\\n' +\n//   'afuVeLHcDsRp6hol4P+ZFIhu8mmbI1u0hH3W/0C2BuYXB5PC+5izFFh/nP0lc2Lf\\n' +\n//   '6rELO9LZdnOhpL1ExFOq9H/B8tPQ84T3Sgb4nAifDabNt/zu6MmCGo5U8lwEFtGM\\n' +\n//   'RoOaX4AS+909x00lYnmtwsDVWv9vBiJCXRsCAwEAAaOByTCBxjBgBgNVHR8EWTBX\\n' +\n//   'MFWgU6BRhk9odHRwOi8vdHJ1c3RlZHNlcnZpY2VzLmludGVsLmNvbS9jb250ZW50\\n' +\n//   'L0NSTC9TR1gvQXR0ZXN0YXRpb25SZXBvcnRTaWduaW5nQ0EuY3JsMB0GA1UdDgQW\\n' +\n//   'BBR4Q3t2pn680K9+QjfrNXw7hwFRPDAfBgNVHSMEGDAWgBR4Q3t2pn680K9+Qjfr\\n' +\n//   'NXw7hwFRPDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADANBgkq\\n' +\n//   'hkiG9w0BAQsFAAOCAYEAeF8tYMXICvQqeXYQITkV2oLJsp6J4JAqJabHWxYJHGir\\n' +\n//   'IEqucRiJSSx+HjIJEUVaj8E0QjEud6Y5lNmXlcjqRXaCPOqK0eGRz6hi+ripMtPZ\\n' +\n//   'sFNaBwLQVV905SDjAzDzNIDnrcnXyB4gcDFCvwDFKKgLRjOB/WAqgscDUoGq5ZVi\\n' +\n//   'zLUzTqiQPmULAQaB9c6Oti6snEFJiCQ67JLyW/E83/frzCmO5Ru6WjU4tmsmy8Ra\\n' +\n//   'Ud4APK0wZTGtfPXU7w+IBdG5Ez0kE1qzxGQaL4gINJ1zMyleDnbuS8UicjJijvqA\\n' +\n//   '152Sq049ESDz+1rRGc2NVEqh1KaGXmtXvqxXcTB+Ljy5Bw2ke0v8iGngFBPqCTVB\\n' +\n//   '3op5KBG3RjbF6RRSzwzuWfL7QErNC8WEy5yDVARzTA5+xmBc388v9Dm21HGfcC8O\\n' +\n//   'DD+gT9sSpssq0ascmvH49MOgjt1yoysLtdCtJW/9FZpoOypaHx0R+mJTLwPXVMrv\\n' +\n//   'DaVzWh5aiEx+idkSGMnX\\n' +\n//   '-----END CERTIFICATE-----';\n\n// /**\n//  * Serialize the pem cert.\n//  *\n//  * @param {string} pem\n//  * @return {*}\n//  */\n// function readCert(pem) {\n//   let cert;\n//\n//   try {\n//     cert = pki.certificateFromPem(pem);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to load report certificate : ' + e,\n//     };\n//   }\n//   return cert;\n// }\n\n// /**\n//  * Parse the signer's address from the quote\n//  *\n//  * @param {string} reportContent\n//  * @return {string}\n//  */\n// function parseAddress(reportContent) {\n//   const report = JSON.parse(reportContent);\n//   let b = new Buffer(report.isvEnclaveQuoteBody, 'base64');\n//\n//   return b.slice(368, 410).toString();\n// }\n\n// /**\n//  * Verifies that the worker signer address is associated to an authentic SGX report\n//  *\n//  * @param {string} signer\n//  * @param {string} encodedReport\n//  * @return {*}\n//  */\n// function verifyWorker(signer, encodedReport) {\n//   const reportArgs = RLP.decode(encodedReport);\n//   // console.log ('decoding report\\n', reportArgs[0], '\\n', reportArgs[1], '\\n', reportArgs[2]);\n//   const report = reportArgs[0].toString('utf8');\n//\n//   if (report === 'simulation') {\n//     return {\n//       verified: true,\n//       err: 'Running in simulation mode',\n//     };\n//   }\n//\n//   const reportCert = reportArgs[1].toString('utf8');\n//   const reportSig = reportArgs[2];\n//   const cert = readCert(reportCert);\n//   let md = forge.md.sha256.create();\n//\n//   md.update(report, 'utf8');\n//\n//   try {\n//     // verify data with a public key\n//     // (defaults to RSASSA PKCS#1 v1.5)\n//     // TODO: verify that the public key belongs to the signer\n//     const verified = cert.publicKey.verify(md.digest().bytes(), reportSig);\n//\n//     if (!verified) {\n//       return {\n//         verified: false,\n//         err: 'The signature does not match the signed report',\n//       };\n//     }\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to verify the report signature: ' + e,\n//     };\n//   }\n//\n//   let caStore;\n//\n//   try {\n//     caStore = pki.createCaStore([INTEL_CA]);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to load CA certificate: ' + e,\n//     };\n//   }\n//\n//   try {\n//     pki.verifyCertificateChain(caStore, [cert]);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to verify certificate: ' + e,\n//     };\n//   }\n//\n//   const address = parseAddress(report);\n//\n//   if (address !== signer) {\n//     return {\n//       verified: false,\n//       err: 'Signer address does not match the report: ' + signer + ' != ' +\n//         address,\n//     };\n//   }\n//\n//   return {verified: true, err: undefined};\n// }\n\n// /**\n//  * Encode secret contract function arguments\n//  *\n//  * @param {Object} args\n//  * @return {string}\n//  */\n// function encodeArguments(args) {\n//   return '0x' + RLP.encode(args).toString('hex');\n// }\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {string} sender\n * @param {Number} nonce\n * @return {string}\n */\nfunction generateScAddr(sender, nonce) {\n  return web3Utils.soliditySha3(\n    {t: 'bytes', v: sender},\n    {t: 'uint', v: nonce},\n  );\n}\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {string} hexStr - Buffer being appended to\n * @param {Array} inputsArray - Array of inputs\n * @return {string} - Final appended hex string\n */\nfunction appendMessages(hexStr, inputsArray) {\n  for (let input of inputsArray) {\n    input = remove0x(input);\n    // since the inputs are in hex string, they are twice as long as their bytes\n    hexStr += JSBI.BigInt(input.length/2).toString(16).padStart(16, '0') + input;\n  }\n  return hexStr;\n}\n\n/**\n * Generate a hash of an array containing an array of inputs\n *\n * @param {string} hexStr - Buffer being appended to\n * @param {Array} inputsArray - Array of array of inputs\n * @return {string} - Final appended hex string\n */\nfunction appendArrayMessages(hexStr, inputsArray) {\n  for (let array of inputsArray) {\n    hexStr += JSBI.BigInt(array.length).toString(16).padStart(16, '0');\n    hexStr = appendMessages(hexStr, array);\n  }\n  return hexStr;\n}\n\n/**\n * Generate a hash of all inputs\n *\n * @param {array} inputsArray - Array of inputs\n * @return {string} Hash of inputs\n */\nfunction hash(inputsArray) {\n  let hexStr = appendMessages('', inputsArray);\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n/**\n * Generate a hash of inputs for setting the worker params from the principal node\n *\n * @param {Number} seed - The random integer generated by the enclave\n * @param {Number} nonce - Nonce value for principal node\n * @param {Array} workerAddresses - Worker signing addresses\n * @param {Array} workerStakes - Worker stake balances\n * @return {string} Hash of inputs\n */\nfunction principalHash(seed, nonce, workerAddresses, workerStakes) {\n  let hexStr = '';\n  hexStr = appendMessages(hexStr, [seed, nonce]);\n  hexStr = appendArrayMessages(hexStr, [workerAddresses, workerStakes]);\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n/**\n * Generate a hash of inputs necessary for commit multiple receipts logic\n *\n * @param {string} codeHash\n * @param {Array} inputsHashes\n * @param {string} lastStateDeltaHash\n * @param {Array} stateDeltaHashes\n * @param {Array} outputHashes\n * @param {Array} gasesUsed\n * @param {string} optionalEthereumData\n * @param {string} optionalEthereumContractAddress\n * @param {string} successFlag\n * @return {string} hash of inputs\n */\nfunction commitReceiptsHash(codeHash, inputsHashes, lastStateDeltaHash, stateDeltaHashes, outputHashes, gasesUsed,\n                            optionalEthereumData, optionalEthereumContractAddress, successFlag) {\n  let hexStr = '';\n  hexStr = appendMessages(hexStr, [codeHash]);\n  hexStr = appendArrayMessages(hexStr, [inputsHashes]);\n  hexStr = appendMessages(hexStr, [lastStateDeltaHash]);\n  hexStr = appendArrayMessages(hexStr, [stateDeltaHashes, outputHashes, gasesUsed]);\n  hexStr = appendMessages(hexStr, [optionalEthereumData, optionalEthereumContractAddress, successFlag]);\n\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n// /**\n//  * RLP encode report parts\n//  *\n//  * @param {string} report\n//  * @param {string} cert\n//  * @param {string} sig\n//  * @return {string}\n//  */\n// function encodeReport(report, cert, sig) {\n//   return '0x' + RLP.encode([report, cert, sig]).toString('hex');\n// }\n\n// /**\n//  * Verifies that the specified method signature matches the specs defined\n//  * by the Ethereum abi: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n//  *\n//  * @param {string} methodSig\n//  * @return {boolean}\n//  */\n// function checkMethodSignature(methodSig) {\n//   const rx = /\\b\\((.*?)\\)/g;\n//   const result = rx.test(methodSig);\n//\n//   return result;\n// }\n\n// /**\n//  * Generate an Ethereum-like address from a public key\n//  *\n//  * @param {string} publicKey\n//  * @return {string}\n//  */\n// function toAddress(publicKey) {\n//   const address = EthCrypto.publicKey.toAddress(publicKey);\n//\n//   return address;\n// }\n\n// /**\n//  * Sign a message with the specified private key\n//  *\n//  * @param {string} privateKey\n//  * @param {string} message\n//  * @return {string}\n//  */\n// function sign(privateKey, message) {\n//   return EthCrypto.sign(\n//     privateKey,\n//     message,\n//   );\n// }\n\n// /**\n//  * Returns the address with which the message was signed\n//  *\n//  * @param {string} signature\n//  * @param {string} message\n//  * @return {string}\n//  */\n// function recover(signature, message) {\n//   return EthCrypto.recover(\n//     signature,\n//     message,\n//   );\n// }\n\n// /**\n//  * Returns the public key associated with the message signature\n//  *\n//  * @param {string} signature\n//  * @param {string} message\n//  * @return {string} Public key\n//  */\n// function recoverPublicKey(signature, message) {\n//   return EthCrypto.recoverPublicKey(\n//     signature,\n//     message,\n//   );\n// }\n\n/**\n * This does ECDH key derivation from 2 EC secp256k1 keys.\n * It does so by multiplying the public points by the private point of the over key.\n * This results in a X and Y. it then replaces the Y with 0x02 if Y is even and 0x03 if it's odd.\n * Then it hashes the new Y together with the X using SHA256.\n * Multiplication: https://github.com/indutny/elliptic/blob/master/lib/elliptic/ec/key.js#L104\n * Replacing Y: https://source.that.world/source/libsecp256k1-rs/browse/master/src/ecdh.rs$25\n *\n * @param {string} enclavePublicKey\n * @param {string} clientPrivateKey\n * @return {string}\n */\nfunction getDerivedKey(enclavePublicKey, clientPrivateKey) {\n  let ec = new EC('secp256k1');\n\n  if (enclavePublicKey.length == 128) {\n    enclavePublicKey = '04' + enclavePublicKey;\n  }\n\n  let clientKey = ec.keyFromPrivate(clientPrivateKey, 'hex');\n  let enclaveKey = ec.keyFromPublic(enclavePublicKey, 'hex');\n\n  let sharedPoints = enclaveKey.getPublic().mul(clientKey.getPrivate());\n  let y = 0x02 | (sharedPoints.getY().isOdd() ? 1 : 0);\n  let x = sharedPoints.getX();\n  let yBuffer = Buffer.from([y]);\n  let xBuffer = x.toArrayLike(Buffer, 'be', 32);\n\n  let sha256 = forge.md.sha256.create();\n\n  sha256.update(yBuffer.toString('binary'));\n  sha256.update(xBuffer.toString('binary'));\n\n  return sha256.digest().toHex();\n}\n\n/**\n * Decrypts the encrypted message:\n * Message format: encrypted_message[*]tag[16]iv[12] (represented as: var_name[len])\n *\n * @param {string} keyHex - Derived key\n * @param {string} msgHex - Encrypted message\n * @return {string} Decrypted message\n */\nfunction decryptMessage(keyHex, msgHex) {\n  let key = forge.util.hexToBytes(keyHex);\n  let msgBuf = Buffer.from(msgHex, 'hex');\n  let iv = forge.util.createBuffer(msgBuf.slice(-12));\n  let tag = forge.util.createBuffer(msgBuf.slice(-28, -12));\n  const decipher = forge.cipher.createDecipher('AES-GCM', key);\n\n  decipher.start({iv: iv, tag: tag});\n  decipher.update(\n    forge.util.createBuffer(msgBuf.slice(0, -28)));\n\n  if (decipher.finish()) {\n    return decipher.output.toHex();\n  }\n  throw new Error('decipher did not finish');\n}\n\n/**\n * Encrypts a message using the provided key.\n * Returns an encrypted message in this format:\n * encrypted_message[*]tag[16]iv[12] (represented as: var_name[len])\n *\n * @param {string} keyHex - Derived key\n * @param {string} msg - Unencrypted message\n * @param {string} iv\n * @return {string} Encrypted message\n */\nfunction encryptMessage(keyHex, msg, iv = forge.random.getBytesSync(12)) {\n  let key = forge.util.hexToBytes(keyHex);\n  const cipher = forge.cipher.createCipher('AES-GCM', key);\n\n  cipher.start({iv: iv});\n  cipher.update(forge.util.createBuffer(msg));\n  cipher.finish();\n\n  let result = cipher.output.putBuffer(cipher.mode.tag).putBytes(iv);\n\n  return result.toHex();\n}\n\n/**\n * Converts ENG value to grains format.\n *\n * @param {int} engValue\n * @return {int} ENG value in grains format\n */\nfunction toGrains(engValue) {\n  return engValue * 10**8;\n}\n\n// /**\n//  * Converts grains format to ENG value.\n//  *\n//  * @param {int} grains\n//  * @return {int}\n//  */\n// function fromGrains(grains) {\n//   return grains / 10**8;\n// }\n\n/**\n * Removes '0x' from a hex string, if present\n *\n * @param {string} hexString\n * @return {string}\n */\nfunction remove0x(hexString) {\n  if (hexString.substring(0, 2) == '0x') {\n    return hexString.substring(2);\n  } else {\n    return hexString;\n  }\n}\n\n/**\n * Converts a hex string to its ASCII representation\n *\n * @param {string} hexString\n * @return {string}\n */\nfunction hexToAscii(hexString) {\n  if (!(typeof hexString === 'number' || typeof hexString == 'string')) {\n    return '';\n  }\n  hexString = hexString.toString().replace(/\\s+/gi, '');\n  const stack = [];\n  for (let n = 0; n < hexString.length; n += 2) {\n    const code = parseInt(hexString.substr(n, 2), 16);\n    if (!isNaN(code) && code !== 0) {\n      stack.push(String.fromCharCode(code));\n    }\n  }\n  return stack.join('');\n}\n\n/**\n * Sleeps\n *\n * @param {int} ms\n * @return {undefined}\n */\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/** Compress using GZIP\n *  @param {Buffer} buffer to compress\n *  @return {Promise}\n * */\nfunction gzip(buffer) {\n  return new Promise((resolve, reject)=> {\n    zlib.gzip(buffer, (error, result)=>{\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\n/** Unzip using GZIP\n *  @param {Buffer} buffer compressed\n *  @return {Promise}\n * */\nfunction gunzip(buffer) {\n  return new Promise((resolve, reject) => {\n    zlib.gunzip(buffer, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\n\nlet utils = {};\n\n// utils.readCert = readCert;\n// utils.encodeReport = encodeReport;\nutils.test = () => 'hello2';\n// utils.encodeArguments = encodeArguments;\nutils.generateScAddr = generateScAddr;\nutils.hash = hash;\nutils.principalHash = principalHash;\nutils.commitReceiptsHash = commitReceiptsHash;\n// utils.verifyWorker = verifyWorker;\n// utils.checkMethodSignature = checkMethodSignature;\n// utils.toAddress = toAddress;\n// utils.sign = sign;\n// utils.recover = recover;\n// utils.recoverPublicKey = recoverPublicKey;\nutils.getDerivedKey = getDerivedKey;\nutils.encryptMessage = encryptMessage;\nutils.decryptMessage = decryptMessage;\nutils.toGrains = toGrains;\n// utils.fromGrains = fromGrains;\nutils.remove0x = remove0x;\nutils.hexToAscii = hexToAscii;\nutils.sleep = sleep;\nutils.gzip = gzip;\nutils.gunzip = gunzip;\n\nexport default utils;\n","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n// window.Promise = Promise;\nimport utils from './enigma-utils';\nimport Enigma from './Enigma';\nimport * as eeConstants from './emitterConstants';\n\nexport {Enigma, utils, eeConstants};\n","import utils from '../enigma-utils';\n\n/**\n * Encapsulates the Task\n */\nexport default class Task {\n  /**\n   * Task wrapper for contract deployment and regular tasks. This object is iteratively built up during the task\n   * lifecycle\n   *\n   * @param {string} scAddr\n   * @param {string} encryptedFn\n   * @param {string} encryptedAbiEncodedArgs\n   * @param {Number} gasLimit\n   * @param {Number} gasPx\n   * @param {string} msgId\n   * @param {string} userPubKey\n   * @param {Number} firstBlockNumber\n   * @param {string} workerAddress\n   * @param {string} workerEncryptionKey\n   * @param {string} sender\n   * @param {string} userTaskSig\n   * @param {Number} nonce\n   * @param {string} preCode\n   * @param {string} preCodeHash\n   * @param {boolean} isContractDeploymentTask\n   */\n  constructor(scAddr, encryptedFn, encryptedAbiEncodedArgs, gasLimit, gasPx, msgId, userPubKey, firstBlockNumber,\n              workerAddress, workerEncryptionKey, sender, userTaskSig, nonce, preCode, preCodeHash,\n              isContractDeploymentTask) {\n    // Initial task attributes\n    this.inputsHash = utils.hash([encryptedFn, encryptedAbiEncodedArgs,\n      isContractDeploymentTask ? preCodeHash : scAddr, userPubKey]);\n    this.scAddr = scAddr;\n    this.encryptedFn = encryptedFn;\n    this.encryptedAbiEncodedArgs = encryptedAbiEncodedArgs;\n    this.gasLimit = gasLimit;\n    this.gasPx = gasPx;\n    this.msgId = msgId;\n    this.userPubKey = userPubKey;\n    this.firstBlockNumber = firstBlockNumber;\n    this.workerAddress = workerAddress;\n    this.workerEncryptionKey = workerEncryptionKey;\n    this.sender = sender;\n    this.userTaskSig = userTaskSig;\n    this.nonce = nonce;\n    this.preCode = preCode;\n    this.preCodeHash = preCodeHash;\n    this.isContractDeploymentTask = isContractDeploymentTask;\n\n    // Attributes added to task when task record is created on ETH, most critically, the taskId (a unique value\n    // for each task computed from hash(hash(encrypted function signature, encrypted ABI-encoded arguments, gas limit,\n    // gas price, user's ETH address), user's nonce value monotonically increasing for every task deployment)\n    this.transactionHash = '';\n    this.taskId = '';\n    this.receipt = '';\n    this.ethStatus = 0;\n    this.proof = '';\n    this.creationBlockNumber = -1;\n\n    // Attributes added to task when computation result is being polled/retrieved from the ENG network\n    this.encryptedAbiEncodedOutputs = '';\n    this.delta = '';\n    this.usedGas = '';\n    this.ethereumPayload = '';\n    this.ethereumAddress = '';\n    this.workerTaskSig = '';\n    this.engStatus = 'null';\n\n    this.decryptedOutput = '';\n  }\n}\n","module.exports = require(\"axios\");","module.exports = require(\"buffer\");","module.exports = require(\"core-js/stable\");","module.exports = require(\"elliptic\");","module.exports = require(\"eth-crypto\");","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"jayson/lib/client/browser\");","module.exports = require(\"jsbi\");","module.exports = require(\"node-forge\");","module.exports = require(\"regenerator-runtime/runtime\");","module.exports = require(\"web3-utils\");","module.exports = require(\"zlib\");"],"sourceRoot":""}