{"version":3,"sources":["webpack://enigma-js/webpack/universalModuleDefinition","webpack://enigma-js/webpack/bootstrap","webpack://enigma-js/external \"node-forge\"","webpack://enigma-js/external \"eventemitter3\"","webpack://enigma-js/external \"jsbi\"","webpack://enigma-js/external \"web3-utils\"","webpack://enigma-js/external \"buffer\"","webpack://enigma-js/external \"zlib\"","webpack://enigma-js/external \"eth-crypto\"","webpack://enigma-js/external \"elliptic\"","webpack://enigma-js/external \"jayson/lib/client/browser\"","webpack://enigma-js/external \"axios\"","webpack://enigma-js/external \"retry\"","webpack://enigma-js/external \"ethereumjs-abi\"","webpack://enigma-js/external \"core-js/stable\"","webpack://enigma-js/external \"regenerator-runtime/runtime\"","webpack://enigma-js/./src/enigma-utils.js","webpack://enigma-js/./src/emitterConstants.js","webpack://enigma-js/./src/Admin.js","webpack://enigma-js/./src/models/Task.js","webpack://enigma-js/./src/Enigma.js","webpack://enigma-js/./src/index.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","forge","options","usePureJavaScript","EC","elliptic","ec","appendMessages","hexStr","inputsArray","principalPrefix","arguments","length","undefined","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","input","remove0x","JSBI","BigInt","toString","padStart","err","appendArrayMessages","principal","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","array","hexString","substring","utils","sender","nonce","web3Utils","soliditySha3","v","seed","workerAddresses","workerStakes","codeHash","inputsHashes","lastStateDeltaHash","stateDeltaHashes","outputHashes","gasesUsed","optionalEthereumData","optionalEthereumContractAddress","successFlag","enclavePublicKey","clientPrivateKey","clientKey","keyFromPrivate","sharedPoints","keyFromPublic","getPublic","mul","getPrivate","y","getY","isOdd","x","getX","yBuffer","Buffer","from","xBuffer","toArrayLike","sha256","md","update","digest","toHex","keyHex","msg","iv","random","getBytesSync","util","hexToBytes","cipher","createCipher","start","createBuffer","finish","output","putBuffer","tag","putBytes","msgHex","msgBuf","slice","decipher","createDecipher","Error","engValue","Math","pow","hexToAscii","replace","stack","code","parseInt","substr","isNaN","push","String","fromCharCode","join","sleep","ms","Promise","resolve","setTimeout","gzip","buffer","reject","zlib","error","result","gunzip","ERROR","DEPOSIT_TRANSACTION_HASH","DEPOSIT_CONFIRMATION","DEPOSIT_RECEIPT","WITHDRAW_TRANSACTION_HASH","WITHDRAW_CONFIRMATION","WITHDRAW_RECEIPT","LOGIN_TRANSACTION_HASH","LOGIN_CONFIRMATION","LOGIN_RECEIPT","LOGOUT_TRANSACTION_HASH","LOGOUT_CONFIRMATION","LOGOUT_RECEIPT","DEPLOY_SC_ADDR_RESULT","DEPLOY_SC_ETH_TRANSACTION_HASH","DEPLOY_SC_ETH_CONFIRMATION","DEPLOY_SC_ETH_RECEIPT","DEPLOY_SC_ENG_RECEIPT","CREATE_TASK","CREATE_TASK_INPUT","CREATE_TASK_RECORD_TRANSACTION_HASH","CREATE_TASK_RECORD_CONFIRMATION","CREATE_TASK_RECORD_RECEIPT","CREATE_TASK_RECORD","CREATE_TASK_RECORDS_TRANSACTION_HASH","CREATE_TASK_RECORDS_CONFIRMATION","CREATE_TASK_RECORDS_RECEIPT","CREATE_TASK_RECORDS","SEND_TASK_INPUT_RESULT","POLL_TASK_STATUS_RESULT","GET_TASK_RESULT_RESULT","DEPLOY_SECRET_CONTRACT_RESULT","POLL_TASK_ETH_RESULT","RPC_SEND_TASK_INPUT","RPC_DEPLOY_SECRET_CONTRACT","RPC_GET_TASK_RESULT","RPC_GET_TASK_STATUS","GET_TASK_RESULT_SUCCESS","GET_TASK_RESULT_FAILED","GET_TASK_RESULT_UNVERIFIED","GET_TASK_RESULT_INPROGRESS","ETH_STATUS_UNDEFINED","ETH_STATUS_CREATED","ETH_STATUS_VERIFIED","ETH_STATUS_FAILED","ETH_STATUS_FAILED_ETH","ETH_STATUS_FAILED_RETURN","Admin","web3","enigmaContract","tokenContract","txDefaults","enigma","_classCallCheck","this","sigAddr","methods","getWorkerFromSigningAddress","account","status","report","balance","logs","getWorker","worker","scAddr","getSecretContract","countSecretContracts","stop","getSecretContractAddresses","getAllSecretContractAddresses","index","stateDeltaHash","includes","_this","emitter","EventEmitter","_asyncToGenerator","regeneratorRuntime","mark","_callee12","wrap","_context12","prev","login","send","on","hash","emit","eeConstants","confirmationNumber","receipt","t0","message","_this2","_callee13","_context13","logout","amount","_this3","_callee14","_context14","balanceOf","sent","abrupt","approve","address","deposit","_this4","_callee15","_context15","withdraw","signer","Task","encryptedFn","encryptedAbiEncodedArgs","gasLimit","gasPx","msgId","userPubKey","firstBlockNumber","workerAddress","workerEncryptionKey","userTaskSig","preCode","preCodeHash","isContractDeploymentTask","Task_classCallCheck","inputsHash","transactionHash","taskId","ethStatus","proof","creationBlockNumber","encryptedAbiEncodedOutputs","delta","usedGas","ethereumPayload","ethereumAddress","workerTaskSig","engStatus","decryptedOutput","Enigma","enigmaContractAddr","tokenContractAddr","rpcAddr","config","Enigma_classCallCheck","retry","retries","factor","minTimeout","maxTimeout","randomize","client","jaysonBrowserClient","request","callback","axios","post","JSON","parse","headers","Content-Type","credentials","then","response","data","text","stringify","workerParamsCache","selectedWorkerGroupCache","taskKeyLocalStorage","createContracts","admin","eth","Contract","EnigmaContract","EnigmaTokenContract","fn","args","scAddrOrPreCode","Enigma_asyncToGenerator","_callee","preCodeGzip","argsTranspose","abiEncodedArgs","abiEncodedArgsArray","blockNumber","workerParams","_this$obtainTaskKeyPa","publicKey","privateKey","getWorkerEncryptionKeyResult","id","workerSig","hexToVerify","recAddress","derivedKey","_context","getUserTaskDeployments","t1","generateScAddr","isBuffer","_typeof","map","col","row","abi","encodeParameters","getBlockNumber","getWorkerParams","selectWorkerGroup","toLowerCase","obtainTaskKeyPair","EthCrypto","recover","console","concat","getDerivedKey","encryptMessage","sign","t2","task","_callee2","_context2","createDeploymentTaskRecord","createTaskRecord","events","TaskRecordCreated","returnValues","tasks","_callee3","gasLimits","gasPxs","fees","totalFees","_context3","reduce","a","b","createTaskRecords","taskIds","TaskRecordsCreated","getTaskRecord","taskRecord","outputHash","custodian","getReport","keys","epochSize","getEpochSize","getWorkerParamsResult","workers","stakes","params","workerGroupSize","tokenCpt","add","selectedWorkers","keccak256","randVal","remainder","selectedWorker","subtract","_callee9","rpcEndpointName","emitName","_context9","serializeTask","_this5","operation","attempt","_ref5","_callee10","currentAttempt","getTaskResultResult","_context10","signature","log","_x6","apply","_this$obtainTaskKeyPa2","decryptMessage","getTaskOutputHash","ethOutputHash","engOutputHash","getTaskRecordStatus","withResult","_this6","generator","_this7","innerPollTaskStatus","pollTaskStatusGen","interval","isBrowser","window","encodedPrivateKey","localStorage","getItem","atob","publicKeyByPrivateKey","characters","charAt","floor","createInstance","seedFileSync","needed","fillString","bytesToHex","getBytes","setItem","btoa","_this8","maxRetries","_callee16","retryCount","_context17","delegateYield","scTask","_context16","createTask","sendTaskInput","_this9","_callee18","_context19","_callee17","_context18","encryptedArgs","userDHKey","contractAddress","__webpack_exports__","Enigma_Enigma","enigma_utils","emitterConstants_namespaceObject"],"mappings":"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","file":"enigma-js.node.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"enigma-js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"enigma-js\"] = factory();\n\telse\n\t\troot[\"enigma-js\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","module.exports = require(\"node-forge\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"jsbi\");","module.exports = require(\"web3-utils\");","module.exports = require(\"buffer\");","module.exports = require(\"zlib\");","module.exports = require(\"eth-crypto\");","module.exports = require(\"elliptic\");","module.exports = require(\"jayson/lib/client/browser\");","module.exports = require(\"axios\");","module.exports = require(\"retry\");","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"core-js/stable\");","module.exports = require(\"regenerator-runtime/runtime\");","import JSBI from 'jsbi';\nimport web3Utils from 'web3-utils';\n// import RLP from 'rlp';\nimport forge from 'node-forge';\nimport elliptic from 'elliptic';\nimport {Buffer} from 'buffer';\nimport zlib from 'zlib';\n\nforge.options.usePureJavaScript = true;\n\nconst EC = elliptic.ec;\n\n// const pki = forge.pki;\n\n// const INTEL_CA = '-----BEGIN CERTIFICATE-----\\n' +\n//   'MIIFSzCCA7OgAwIBAgIJANEHdl0yo7CUMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNV\\n' +\n//   'BAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwLU2FudGEgQ2xhcmExGjAYBgNV\\n' +\n//   'BAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQDDCdJbnRlbCBTR1ggQXR0ZXN0\\n' +\n//   'YXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwIBcNMTYxMTE0MTUzNzMxWhgPMjA0OTEy\\n' +\n//   'MzEyMzU5NTlaMH4xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTEUMBIGA1UEBwwL\\n' +\n//   'U2FudGEgQ2xhcmExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0aW9uMTAwLgYDVQQD\\n' +\n//   'DCdJbnRlbCBTR1ggQXR0ZXN0YXRpb24gUmVwb3J0IFNpZ25pbmcgQ0EwggGiMA0G\\n' +\n//   'CSqGSIb3DQEBAQUAA4IBjwAwggGKAoIBgQCfPGR+tXc8u1EtJzLA10Feu1Wg+p7e\\n' +\n//   'LmSRmeaCHbkQ1TF3Nwl3RmpqXkeGzNLd69QUnWovYyVSndEMyYc3sHecGgfinEeh\\n' +\n//   'rgBJSEdsSJ9FpaFdesjsxqzGRa20PYdnnfWcCTvFoulpbFR4VBuXnnVLVzkUvlXT\\n' +\n//   'L/TAnd8nIZk0zZkFJ7P5LtePvykkar7LcSQO85wtcQe0R1Raf/sQ6wYKaKmFgCGe\\n' +\n//   'NpEJUmg4ktal4qgIAxk+QHUxQE42sxViN5mqglB0QJdUot/o9a/V/mMeH8KvOAiQ\\n' +\n//   'byinkNndn+Bgk5sSV5DFgF0DffVqmVMblt5p3jPtImzBIH0QQrXJq39AT8cRwP5H\\n' +\n//   'afuVeLHcDsRp6hol4P+ZFIhu8mmbI1u0hH3W/0C2BuYXB5PC+5izFFh/nP0lc2Lf\\n' +\n//   '6rELO9LZdnOhpL1ExFOq9H/B8tPQ84T3Sgb4nAifDabNt/zu6MmCGo5U8lwEFtGM\\n' +\n//   'RoOaX4AS+909x00lYnmtwsDVWv9vBiJCXRsCAwEAAaOByTCBxjBgBgNVHR8EWTBX\\n' +\n//   'MFWgU6BRhk9odHRwOi8vdHJ1c3RlZHNlcnZpY2VzLmludGVsLmNvbS9jb250ZW50\\n' +\n//   'L0NSTC9TR1gvQXR0ZXN0YXRpb25SZXBvcnRTaWduaW5nQ0EuY3JsMB0GA1UdDgQW\\n' +\n//   'BBR4Q3t2pn680K9+QjfrNXw7hwFRPDAfBgNVHSMEGDAWgBR4Q3t2pn680K9+Qjfr\\n' +\n//   'NXw7hwFRPDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADANBgkq\\n' +\n//   'hkiG9w0BAQsFAAOCAYEAeF8tYMXICvQqeXYQITkV2oLJsp6J4JAqJabHWxYJHGir\\n' +\n//   'IEqucRiJSSx+HjIJEUVaj8E0QjEud6Y5lNmXlcjqRXaCPOqK0eGRz6hi+ripMtPZ\\n' +\n//   'sFNaBwLQVV905SDjAzDzNIDnrcnXyB4gcDFCvwDFKKgLRjOB/WAqgscDUoGq5ZVi\\n' +\n//   'zLUzTqiQPmULAQaB9c6Oti6snEFJiCQ67JLyW/E83/frzCmO5Ru6WjU4tmsmy8Ra\\n' +\n//   'Ud4APK0wZTGtfPXU7w+IBdG5Ez0kE1qzxGQaL4gINJ1zMyleDnbuS8UicjJijvqA\\n' +\n//   '152Sq049ESDz+1rRGc2NVEqh1KaGXmtXvqxXcTB+Ljy5Bw2ke0v8iGngFBPqCTVB\\n' +\n//   '3op5KBG3RjbF6RRSzwzuWfL7QErNC8WEy5yDVARzTA5+xmBc388v9Dm21HGfcC8O\\n' +\n//   'DD+gT9sSpssq0ascmvH49MOgjt1yoysLtdCtJW/9FZpoOypaHx0R+mJTLwPXVMrv\\n' +\n//   'DaVzWh5aiEx+idkSGMnX\\n' +\n//   '-----END CERTIFICATE-----';\n\n// /**\n//  * Serialize the pem cert.\n//  *\n//  * @param {string} pem\n//  * @return {*}\n//  */\n// function readCert(pem) {\n//   let cert;\n//\n//   try {\n//     cert = pki.certificateFromPem(pem);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to load report certificate : ' + e,\n//     };\n//   }\n//   return cert;\n// }\n\n// /**\n//  * Parse the signer's address from the quote\n//  *\n//  * @param {string} reportContent\n//  * @return {string}\n//  */\n// function parseAddress(reportContent) {\n//   const report = JSON.parse(reportContent);\n//   let b = new Buffer(report.isvEnclaveQuoteBody, 'base64');\n//\n//   return b.slice(368, 410).toString();\n// }\n\n// /**\n//  * Verifies that the worker signer address is associated to an authentic SGX report\n//  *\n//  * @param {string} signer\n//  * @param {string} encodedReport\n//  * @return {*}\n//  */\n// function verifyWorker(signer, encodedReport) {\n//   const reportArgs = RLP.decode(encodedReport);\n//   // console.log ('decoding report\\n', reportArgs[0], '\\n', reportArgs[1], '\\n', reportArgs[2]);\n//   const report = reportArgs[0].toString('utf8');\n//\n//   if (report === 'simulation') {\n//     return {\n//       verified: true,\n//       err: 'Running in simulation mode',\n//     };\n//   }\n//\n//   const reportCert = reportArgs[1].toString('utf8');\n//   const reportSig = reportArgs[2];\n//   const cert = readCert(reportCert);\n//   let md = forge.md.sha256.create();\n//\n//   md.update(report, 'utf8');\n//\n//   try {\n//     // verify data with a public key\n//     // (defaults to RSASSA PKCS#1 v1.5)\n//     // TODO: verify that the public key belongs to the signer\n//     const verified = cert.publicKey.verify(md.digest().bytes(), reportSig);\n//\n//     if (!verified) {\n//       return {\n//         verified: false,\n//         err: 'The signature does not match the signed report',\n//       };\n//     }\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to verify the report signature: ' + e,\n//     };\n//   }\n//\n//   let caStore;\n//\n//   try {\n//     caStore = pki.createCaStore([INTEL_CA]);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to load CA certificate: ' + e,\n//     };\n//   }\n//\n//   try {\n//     pki.verifyCertificateChain(caStore, [cert]);\n//   } catch (e) {\n//     return {\n//       verified: false,\n//       err: 'Failed to verify certificate: ' + e,\n//     };\n//   }\n//\n//   const address = parseAddress(report);\n//\n//   if (address !== signer) {\n//     return {\n//       verified: false,\n//       err: 'Signer address does not match the report: ' + signer + ' != ' +\n//         address,\n//     };\n//   }\n//\n//   return {verified: true, err: undefined};\n// }\n\n// /**\n//  * Encode secret contract function arguments\n//  *\n//  * @param {Object} args\n//  * @return {string}\n//  */\n// function encodeArguments(args) {\n//   return '0x' + RLP.encode(args).toString('hex');\n// }\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {string} sender\n * @param {Number} nonce\n * @return {string}\n */\nfunction generateScAddr(sender, nonce) {\n  return web3Utils.soliditySha3(\n    {t: 'bytes', v: sender},\n    {t: 'uint', v: nonce},\n  );\n}\n\n/**\n * Generate a taskId using a hash of all inputs\n * The Enigma contract uses the same logic to generate a matching taskId\n *\n * @param {string} hexStr - Buffer being appended to\n * @param {Array} inputsArray - Array of inputs\n * @param {boolean} principal - Principal hashing\n * @return {string} - Final appended hex string\n */\nfunction appendMessages(hexStr, inputsArray, principal=false) {\n  const principalPrefix = principal ? '00' : '';\n  for (let input of inputsArray) {\n    input = remove0x(input);\n    // since the inputs are in hex string, they are twice as long as their bytes\n    hexStr += principalPrefix + JSBI.BigInt(input.length/2).toString(16).padStart(16, '0') + input;\n  }\n  return hexStr;\n}\n\n/**\n * Generate a hash of an array containing an array of inputs\n *\n * @param {string} hexStr - Buffer being appended to\n * @param {Array} inputsArray - Array of array of inputs\n * @param {boolean} principal - Principal hashing\n * @return {string} - Final appended hex string\n */\nfunction appendArrayMessages(hexStr, inputsArray, principal=false) {\n  const principalPrefix = principal ? '01' : '';\n  for (let array of inputsArray) {\n    hexStr += principalPrefix + JSBI.BigInt(array[0].length * (array[1]+9)).toString(16).padStart(16, '0');\n    hexStr = appendMessages(hexStr, array[0], principal);\n  }\n  return hexStr;\n}\n\n/**\n * Generate a hash of all inputs\n *\n * @param {array} inputsArray - Array of inputs\n * @return {string} Hash of inputs\n */\nfunction hash(inputsArray) {\n  let hexStr = appendMessages('', inputsArray);\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n/**\n * Generate a hash of inputs for setting the worker params from the principal node\n *\n * @param {Number} seed - The random integer generated by the enclave\n * @param {Number} nonce - Nonce value for principal node\n * @param {Array} workerAddresses - Worker signing addresses\n * @param {Array} workerStakes - Worker stake balances\n * @return {string} Hash of inputs\n */\nfunction principalHash(seed, nonce, workerAddresses, workerStakes) {\n  let hexStr = '';\n  hexStr = appendMessages(hexStr, [seed, nonce], true);\n  hexStr = appendArrayMessages(hexStr, [[workerAddresses, 20], [workerStakes, 32]], true);\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n/**\n * Generate a hash of inputs necessary for commit multiple receipts logic\n *\n * @param {string} codeHash\n * @param {Array} inputsHashes\n * @param {string} lastStateDeltaHash\n * @param {Array} stateDeltaHashes\n * @param {Array} outputHashes\n * @param {Array} gasesUsed\n * @param {string} optionalEthereumData\n * @param {string} optionalEthereumContractAddress\n * @param {string} successFlag\n * @return {string} hash of inputs\n */\nfunction commitReceiptsHash(codeHash, inputsHashes, lastStateDeltaHash, stateDeltaHashes, outputHashes, gasesUsed,\n                            optionalEthereumData, optionalEthereumContractAddress, successFlag) {\n  let hexStr = '';\n  hexStr = appendMessages(hexStr, [codeHash]);\n  hexStr = appendArrayMessages(hexStr, [inputsHashes]);\n  hexStr = appendMessages(hexStr, [lastStateDeltaHash]);\n  hexStr = appendArrayMessages(hexStr, [stateDeltaHashes, outputHashes, gasesUsed]);\n  hexStr = appendMessages(hexStr, [optionalEthereumData, optionalEthereumContractAddress, successFlag]);\n\n  return web3Utils.soliditySha3({t: 'bytes', v: hexStr});\n}\n\n// /**\n//  * RLP encode report parts\n//  *\n//  * @param {string} report\n//  * @param {string} cert\n//  * @param {string} sig\n//  * @return {string}\n//  */\n// function encodeReport(report, cert, sig) {\n//   return '0x' + RLP.encode([report, cert, sig]).toString('hex');\n// }\n\n// /**\n//  * Verifies that the specified method signature matches the specs defined\n//  * by the Ethereum abi: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n//  *\n//  * @param {string} methodSig\n//  * @return {boolean}\n//  */\n// function checkMethodSignature(methodSig) {\n//   const rx = /\\b\\((.*?)\\)/g;\n//   const result = rx.test(methodSig);\n//\n//   return result;\n// }\n\n// /**\n//  * Generate an Ethereum-like address from a public key\n//  *\n//  * @param {string} publicKey\n//  * @return {string}\n//  */\n// function toAddress(publicKey) {\n//   const address = EthCrypto.publicKey.toAddress(publicKey);\n//\n//   return address;\n// }\n\n// /**\n//  * Sign a message with the specified private key\n//  *\n//  * @param {string} privateKey\n//  * @param {string} message\n//  * @return {string}\n//  */\n// function sign(privateKey, message) {\n//   return EthCrypto.sign(\n//     privateKey,\n//     message,\n//   );\n// }\n\n// /**\n//  * Returns the address with which the message was signed\n//  *\n//  * @param {string} signature\n//  * @param {string} message\n//  * @return {string}\n//  */\n// function recover(signature, message) {\n//   return EthCrypto.recover(\n//     signature,\n//     message,\n//   );\n// }\n\n// /**\n//  * Returns the public key associated with the message signature\n//  *\n//  * @param {string} signature\n//  * @param {string} message\n//  * @return {string} Public key\n//  */\n// function recoverPublicKey(signature, message) {\n//   return EthCrypto.recoverPublicKey(\n//     signature,\n//     message,\n//   );\n// }\n\n/**\n * This does ECDH key derivation from 2 EC secp256k1 keys.\n * It does so by multiplying the public points by the private point of the over key.\n * This results in a X and Y. it then replaces the Y with 0x02 if Y is even and 0x03 if it's odd.\n * Then it hashes the new Y together with the X using SHA256.\n * Multiplication: https://github.com/indutny/elliptic/blob/master/lib/elliptic/ec/key.js#L104\n * Replacing Y: https://source.that.world/source/libsecp256k1-rs/browse/master/src/ecdh.rs$25\n *\n * @param {string} enclavePublicKey\n * @param {string} clientPrivateKey\n * @return {string}\n */\nfunction getDerivedKey(enclavePublicKey, clientPrivateKey) {\n  let ec = new EC('secp256k1');\n\n  if (enclavePublicKey.length == 128) {\n    enclavePublicKey = '04' + enclavePublicKey;\n  }\n\n  let clientKey = ec.keyFromPrivate(clientPrivateKey, 'hex');\n  let enclaveKey = ec.keyFromPublic(enclavePublicKey, 'hex');\n\n  let sharedPoints = enclaveKey.getPublic().mul(clientKey.getPrivate());\n  let y = 0x02 | (sharedPoints.getY().isOdd() ? 1 : 0);\n  let x = sharedPoints.getX();\n  let yBuffer = Buffer.from([y]);\n  let xBuffer = x.toArrayLike(Buffer, 'be', 32);\n\n  let sha256 = forge.md.sha256.create();\n\n  sha256.update(yBuffer.toString('binary'));\n  sha256.update(xBuffer.toString('binary'));\n\n  return sha256.digest().toHex();\n}\n\n/**\n * Decrypts the encrypted message:\n * Message format: encrypted_message[*]tag[16]iv[12] (represented as: var_name[len])\n *\n * @param {string} keyHex - Derived key\n * @param {string} msgHex - Encrypted message\n * @return {string} Decrypted message\n */\nfunction decryptMessage(keyHex, msgHex) {\n  let key = forge.util.hexToBytes(keyHex);\n  let msgBuf = Buffer.from(msgHex, 'hex');\n  let iv = forge.util.createBuffer(msgBuf.slice(-12));\n  let tag = forge.util.createBuffer(msgBuf.slice(-28, -12));\n  const decipher = forge.cipher.createDecipher('AES-GCM', key);\n\n  decipher.start({iv: iv, tag: tag});\n  decipher.update(\n    forge.util.createBuffer(msgBuf.slice(0, -28)));\n\n  if (decipher.finish()) {\n    return decipher.output.toHex();\n  }\n  throw new Error('decipher did not finish');\n}\n\n/**\n * Encrypts a message using the provided key.\n * Returns an encrypted message in this format:\n * encrypted_message[*]tag[16]iv[12] (represented as: var_name[len])\n *\n * @param {string} keyHex - Derived key\n * @param {string} msg - Unencrypted message\n * @param {string} iv\n * @return {string} Encrypted message\n */\nfunction encryptMessage(keyHex, msg, iv = forge.random.getBytesSync(12)) {\n  let key = forge.util.hexToBytes(keyHex);\n  const cipher = forge.cipher.createCipher('AES-GCM', key);\n\n  cipher.start({iv: iv});\n  cipher.update(forge.util.createBuffer(msg));\n  cipher.finish();\n\n  let result = cipher.output.putBuffer(cipher.mode.tag).putBytes(iv);\n\n  return result.toHex();\n}\n\n/**\n * Converts ENG value to grains format.\n *\n * @param {int} engValue\n * @return {int} ENG value in grains format\n */\nfunction toGrains(engValue) {\n  return engValue * 10**8;\n}\n\n// /**\n//  * Converts grains format to ENG value.\n//  *\n//  * @param {int} grains\n//  * @return {int}\n//  */\n// function fromGrains(grains) {\n//   return grains / 10**8;\n// }\n\n/**\n * Removes '0x' from a hex string, if present\n *\n * @param {string} hexString\n * @return {string}\n */\nfunction remove0x(hexString) {\n  if (hexString.substring(0, 2) == '0x') {\n    return hexString.substring(2);\n  } else {\n    return hexString;\n  }\n}\n\n/**\n * Converts a hex string to its ASCII representation\n *\n * @param {string} hexString\n * @return {string}\n */\nfunction hexToAscii(hexString) {\n  if (!(typeof hexString === 'number' || typeof hexString == 'string')) {\n    return '';\n  }\n  hexString = hexString.toString().replace(/\\s+/gi, '');\n  const stack = [];\n  for (let n = 0; n < hexString.length; n += 2) {\n    const code = parseInt(hexString.substr(n, 2), 16);\n    if (!isNaN(code) && code !== 0) {\n      stack.push(String.fromCharCode(code));\n    }\n  }\n  return stack.join('');\n}\n\n/**\n * Sleeps\n *\n * @param {int} ms\n * @return {undefined}\n */\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/** Compress using GZIP\n *  @param {Buffer} buffer to compress\n *  @return {Promise}\n * */\nfunction gzip(buffer) {\n  return new Promise((resolve, reject)=> {\n    zlib.gzip(buffer, (error, result)=>{\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\n/** Unzip using GZIP\n *  @param {Buffer} buffer compressed\n *  @return {Promise}\n * */\nfunction gunzip(buffer) {\n  return new Promise((resolve, reject) => {\n    zlib.gunzip(buffer, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\n\nlet utils = {};\n\n// utils.readCert = readCert;\n// utils.encodeReport = encodeReport;\nutils.test = () => 'hello2';\n// utils.encodeArguments = encodeArguments;\nutils.generateScAddr = generateScAddr;\nutils.hash = hash;\nutils.principalHash = principalHash;\nutils.commitReceiptsHash = commitReceiptsHash;\n// utils.verifyWorker = verifyWorker;\n// utils.checkMethodSignature = checkMethodSignature;\n// utils.toAddress = toAddress;\n// utils.sign = sign;\n// utils.recover = recover;\n// utils.recoverPublicKey = recoverPublicKey;\nutils.getDerivedKey = getDerivedKey;\nutils.encryptMessage = encryptMessage;\nutils.decryptMessage = decryptMessage;\nutils.toGrains = toGrains;\n// utils.fromGrains = fromGrains;\nutils.remove0x = remove0x;\nutils.hexToAscii = hexToAscii;\nutils.sleep = sleep;\nutils.gzip = gzip;\nutils.gunzip = gunzip;\n\nexport default utils;\n","export const ERROR = 'error';\nexport const DEPOSIT_TRANSACTION_HASH = 'depositTransactionHash';\nexport const DEPOSIT_CONFIRMATION = 'depositConfirmation';\nexport const DEPOSIT_RECEIPT = 'depositReceipt';\nexport const WITHDRAW_TRANSACTION_HASH = 'withdrawTransactionHash';\nexport const WITHDRAW_CONFIRMATION = 'withdrawConfirmation';\nexport const WITHDRAW_RECEIPT = 'withdrawReceipt';\nexport const LOGIN_TRANSACTION_HASH = 'loginTransactionHash';\nexport const LOGIN_CONFIRMATION = 'loginConfirmation';\nexport const LOGIN_RECEIPT = 'loginReceipt';\nexport const LOGOUT_TRANSACTION_HASH = 'logoutTransactionHash';\nexport const LOGOUT_CONFIRMATION = 'logoutConfirmation';\nexport const LOGOUT_RECEIPT = 'logoutReceipt';\n\nexport const DEPLOY_SC_ADDR_RESULT = 'deploySCAddrResult';\nexport const DEPLOY_SC_ETH_TRANSACTION_HASH = 'deploySCEthTransactionHash';\nexport const DEPLOY_SC_ETH_CONFIRMATION = 'deploySCEthConfirmation';\nexport const DEPLOY_SC_ETH_RECEIPT = 'deploySCEthReceipt';\nexport const DEPLOY_SC_ENG_RECEIPT = 'deploySCEngReceipt';\n\nexport const CREATE_TASK = 'createTask';\nexport const CREATE_TASK_INPUT = 'createTaskInput';\nexport const CREATE_TASK_RECORD_TRANSACTION_HASH = 'createTaskRecordTransactionHash';\nexport const CREATE_TASK_RECORD_CONFIRMATION = 'createTaskRecordConfirmation';\nexport const CREATE_TASK_RECORD_RECEIPT = 'createTaskRecordReceipt';\nexport const CREATE_TASK_RECORD = 'createTaskRecord';\nexport const CREATE_TASK_RECORDS_TRANSACTION_HASH = 'createTaskRecordsTransactionHash';\nexport const CREATE_TASK_RECORDS_CONFIRMATION = 'createTaskRecordsConfirmation';\nexport const CREATE_TASK_RECORDS_RECEIPT = 'createTaskRecordsReceipt';\nexport const CREATE_TASK_RECORDS = 'createTaskRecords';\n\nexport const SEND_TASK_INPUT_RESULT = 'sendTaskInputResult';\nexport const POLL_TASK_STATUS_RESULT = 'pollTaskStatusResult';\nexport const GET_TASK_RESULT_RESULT = 'getTaskResultResult';\nexport const DEPLOY_SECRET_CONTRACT_RESULT = 'deploySecretContractResult';\n\nexport const POLL_TASK_ETH_RESULT = 'pollTaskETHResult';\n\nexport const RPC_SEND_TASK_INPUT = 'sendTaskInput';\nexport const RPC_DEPLOY_SECRET_CONTRACT = 'deploySecretContract';\nexport const RPC_GET_TASK_RESULT = 'getTaskResult';\nexport const RPC_GET_TASK_STATUS = 'getTaskStatus';\nexport const GET_TASK_RESULT_SUCCESS = 'SUCCESS';\nexport const GET_TASK_RESULT_FAILED = 'FAILED';\nexport const GET_TASK_RESULT_UNVERIFIED = 'UNVERIFIED';\nexport const GET_TASK_RESULT_INPROGRESS = 'INPROGRESS';\n\nexport const ETH_STATUS_UNDEFINED = 0;\nexport const ETH_STATUS_CREATED = 1;\nexport const ETH_STATUS_VERIFIED = 2;\nexport const ETH_STATUS_FAILED = 3;\nexport const ETH_STATUS_FAILED_ETH = 4;\nexport const ETH_STATUS_FAILED_RETURN = 5;\n","import EventEmitter from 'eventemitter3';\nimport * as eeConstants from './emitterConstants';\n\n/**\n * Encapsulates the admin operations\n */\nexport default class Admin {\n  /**\n   * Constructor\n   * @param {Web3} web3 - Web3 provider for the library\n   * @param {Web3.Contract} enigmaContract - Enigma contract deployed to Ethereum\n   * @param {Web3.Contract} tokenContract - Enigma token contract deployed to Ethereum\n   * @param {Object} txDefaults\n   * @param {Enigma} enigma - Enigma wrapper instance\n   */\n  constructor(web3, enigmaContract, tokenContract, txDefaults, enigma) {\n    this.web3 = web3;\n    this.enigmaContract = enigmaContract;\n    this.tokenContract = tokenContract;\n    this.txDefaults = txDefaults;\n    this.enigma = enigma;\n  }\n\n  /**\n   * Find worker by signing address\n   *\n   * @param {string} sigAddr - The signing address\n   * @return {Promise} Resolves to worker's details\n   */\n  async findBySigningAddress(sigAddr) {\n    const result = await this.enigmaContract.methods.getWorkerFromSigningAddress(sigAddr).call();\n    return {\n      account: result[0],\n      status: parseInt(result[1][1]),\n      report: result[1][2],\n      balance: parseInt(result[1][3]),\n      logs: result[1][4],\n    };\n  }\n\n  /**\n   * Get the worker's status\n   *\n   * @param {string} account - Worker's ETH address\n   * @return {Promise} Resolves to status of worker (0=Unregistered, 1=LoggedIn, 2=LoggedOut)\n   */\n  async getWorkerStatus(account) {\n    const worker = await this.enigmaContract.methods.getWorker(account).call();\n    return parseInt(worker.status);\n  }\n\n  /**\n   * Checks if a secret contract is deployed\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} Resolves to a boolean value whether the contract has been deployed or not\n   */\n  async isDeployed(scAddr) {\n    return parseInt((await this.enigmaContract.methods.getSecretContract(scAddr).call()).status) === 1;\n  }\n\n  /**\n   * Count the number of deployed secret contracts.\n   *\n   * @return {Promise} - Resolves to number of deployed secret contracts\n   */\n  async countSecretContracts() {\n    return parseInt(await this.enigmaContract.methods.countSecretContracts().call());\n  }\n\n  /**\n   * Get the addresses of deployed secret contracts within a specified range.\n   *\n   * @param {number} start - Start index of secret contract address to retrieve (inclusive)\n   * @param {number} stop - Stop index of secret contract address to retrieve (exclusive)\n   * @return {Promise} - Resolves to the addresses of deployed secret contracts within range\n   */\n  async getSecretContractAddresses(start, stop) {\n    return (await this.enigmaContract.methods.getSecretContractAddresses(start, stop).call());\n  }\n\n  /**\n   * Get the addresses of all deployed secret contracts.\n   *\n   * @return {Promise} - Resolves to the addresses of deployed secret contracts within range\n   */\n  async getAllSecretContractAddresses() {\n    return (await this.enigmaContract.methods.getAllSecretContractAddresses().call());\n  }\n\n  /**\n   * Fetches the secret contract bytecode hash\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} - Resolves to the bytecode hash of the deployed secret contract\n   */\n  async getCodeHash(scAddr) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).codeHash;\n  }\n\n  /**\n   * Count the state deltas for the specified secret contract.\n   *\n   * @param {string} scAddr - Secret contract address\n   * @return {Promise} - Resolves to count of state deltas\n   */\n  async countStateDeltas(scAddr) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.length;\n  }\n\n  /**\n   * Fetch the state delta hash at the specified index position\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {number} index - Index of state delta hash to retrieve\n   * @return {Promise} - Resolves to state delta hash at the specified position\n   */\n  async getStateDeltaHash(scAddr, index) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes[index];\n  }\n\n  /**\n   * Fetch state delta hashes in the specified range\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {number} start - Start index of state delta hash to retrieve (inclusive)\n   * @param {number} stop - Stop index of state delta hash to retrieve (exclusive)\n   * @return {Promise} - Resolves to the state delta hashes in the specified range\n   */\n  async getStateDeltaHashes(scAddr, start, stop) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.slice(start, stop);\n  }\n\n  /**\n   * Check that the specified state delta hash is valid.\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {string} stateDeltaHash - State delta hash for a given task\n   * @return {Promise} Resolves to boolean value for whether the state delta hash is valid\n   */\n  async isValidDeltaHash(scAddr, stateDeltaHash) {\n    return (await this.enigmaContract.methods.getSecretContract(scAddr).call()).stateDeltaHashes.includes(\n      stateDeltaHash);\n  }\n\n  /**\n   * Login the selected worker\n   *\n   * @param {string} account - ETH address for worker being logged in\n   * @return {EventEmitter} EventEmitter to be listened to track login transaction\n   */\n  login(account) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.login().send({from: account}).on('transactionHash', (hash) => {\n          emitter.emit(eeConstants.LOGIN_TRANSACTION_HASH, hash);\n        }).on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.LOGIN_CONFIRMATION, confirmationNumber, receipt);\n        }).on('receipt', (receipt) => {\n          emitter.emit(eeConstants.LOGIN_RECEIPT, receipt);\n        });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Logout the selected worker\n   *\n   * @param {string} account - ETH address for worker being logged out\n   * @return {EventEmitter} EventEmitter to be listened to track logout transaction\n   */\n  logout(account) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.logout().send({from: account}).on('transactionHash', (hash) => {\n          emitter.emit(eeConstants.LOGOUT_TRANSACTION_HASH, hash);\n        }).on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.LOGOUT_CONFIRMATION, confirmationNumber, receipt);\n        }).on('receipt', (receipt) => {\n          emitter.emit(eeConstants.LOGOUT_RECEIPT, receipt);\n        });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Deposit ENG tokens in the worker's bank. Worker must be registered prior to this.\n   *\n   * @param {string} account - Worker's ETH address\n   * @param {number} amount - Number of ENG tokens to deposit, in grains (10**8 multiplier) format\n   * @return {EventEmitter} EventEmitter to be listened to track deposit transaction\n   */\n  deposit(account, amount) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const balance = await this.tokenContract.methods.balanceOf(account).call();\n      if (balance < amount) {\n        const msg = 'Not enough tokens in wallet';\n        emitter.emit('error', {\n          name: 'NotEnoughTokens',\n          message: msg,\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, amount).send({from: account});\n      try {\n        const receipt = await this.enigmaContract.methods.deposit(account, amount).\n          send({from: account}).\n          on('transactionHash', (hash) => {\n            emitter.emit(eeConstants.DEPOSIT_TRANSACTION_HASH, hash);\n          }).\n          on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.DEPOSIT_CONFIRMATION, confirmationNumber, receipt);\n          });\n        emitter.emit(eeConstants.DEPOSIT_RECEIPT, receipt);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Withdraw ENG tokens from the worker's bank. Worker must be in the logged out state and cannot withdraw in the\n   * same epoch as logging out.\n   *\n   * @param {string} account - Worker's ETH address\n   * @param {number} amount - Number of ENG tokens to deposit, in grains (10**8 multiplier) format\n   * @return {EventEmitter} EventEmitter to be listened to track deposit transaction\n   */\n  withdraw(account, amount) {\n    let emitter = new EventEmitter();\n    (async () => {\n      try {\n        await this.enigmaContract.methods.withdraw(amount).\n          send({from: account}).\n          on('transactionHash', (hash) => {\n            emitter.emit(eeConstants.WITHDRAW_TRANSACTION_HASH, hash);\n          }).\n          on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.WITHDRAW_CONFIRMATION, confirmationNumber, receipt);\n          }).\n          on('receipt', (receipt) => {\n            emitter.emit(eeConstants.WITHDRAW_RECEIPT, receipt);\n          });\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get token balance for worker\n   *\n   * @param {string} account - Worker's ETH address\n   * @return {Promise} Resolves to ENG token balance in grains (10**8 multiplier) format\n   */\n  async getBalance(account) {\n    return parseInt((await this.enigmaContract.methods.getWorker(account).call()).balance);\n  }\n\n  /**\n   * Get worker's signer address\n   *\n   * @param {string} account - Worker's ETH address\n   * @return {Promise} Resolves to worker's signer address\n   */\n  async getWorkerSignerAddr(account) {\n    return (await this.enigmaContract.methods.getWorker(account).call()).signer;\n  }\n}\n","import utils from '../enigma-utils';\n\n/**\n * Encapsulates the Task\n */\nexport default class Task {\n  /**\n   * Task wrapper for contract deployment and regular tasks. This object is iteratively built up during the task\n   * lifecycle\n   *\n   * @param {string} scAddr\n   * @param {string} encryptedFn\n   * @param {string} encryptedAbiEncodedArgs\n   * @param {Number} gasLimit\n   * @param {Number} gasPx\n   * @param {string} msgId\n   * @param {string} userPubKey\n   * @param {Number} firstBlockNumber\n   * @param {string} workerAddress\n   * @param {string} workerEncryptionKey\n   * @param {string} sender\n   * @param {string} userTaskSig\n   * @param {Number} nonce\n   * @param {string} preCode\n   * @param {string} preCodeHash\n   * @param {boolean} isContractDeploymentTask\n   */\n  constructor(scAddr, encryptedFn, encryptedAbiEncodedArgs, gasLimit, gasPx, msgId, userPubKey, firstBlockNumber,\n              workerAddress, workerEncryptionKey, sender, userTaskSig, nonce, preCode, preCodeHash,\n              isContractDeploymentTask) {\n    // Initial task attributes\n    this.inputsHash = utils.hash([encryptedFn, encryptedAbiEncodedArgs,\n      isContractDeploymentTask ? preCodeHash : scAddr, userPubKey]);\n    this.scAddr = scAddr;\n    this.encryptedFn = encryptedFn;\n    this.encryptedAbiEncodedArgs = encryptedAbiEncodedArgs;\n    this.gasLimit = gasLimit;\n    this.gasPx = gasPx;\n    this.msgId = msgId;\n    this.userPubKey = userPubKey;\n    this.firstBlockNumber = firstBlockNumber;\n    this.workerAddress = workerAddress;\n    this.workerEncryptionKey = workerEncryptionKey;\n    this.sender = sender;\n    this.userTaskSig = userTaskSig;\n    this.nonce = nonce;\n    this.preCode = preCode;\n    this.preCodeHash = preCodeHash;\n    this.isContractDeploymentTask = isContractDeploymentTask;\n\n    // Attributes added to task when task record is created on ETH, most critically, the taskId (a unique value\n    // for each task computed from hash(hash(encrypted function signature, encrypted ABI-encoded arguments, gas limit,\n    // gas price, user's ETH address), user's nonce value monotonically increasing for every task deployment)\n    this.transactionHash = '';\n    this.taskId = '';\n    this.receipt = '';\n    this.ethStatus = 0;\n    this.proof = '';\n    this.creationBlockNumber = -1;\n\n    // Attributes added to task when computation result is being polled/retrieved from the ENG network\n    this.encryptedAbiEncodedOutputs = '';\n    this.delta = '';\n    this.usedGas = '';\n    this.ethereumPayload = '';\n    this.ethereumAddress = '';\n    this.workerTaskSig = '';\n    this.engStatus = 'null';\n\n    this.decryptedOutput = '';\n  }\n}\n","/* eslint-disable prefer-spread,prefer-rest-params,valid-jsdoc */\nimport EnigmaContract from '../../build/contracts/Enigma';\nimport EnigmaTokenContract from '../../build/contracts/EnigmaToken';\nimport Admin from './Admin';\nimport Task from './models/Task';\nimport EventEmitter from 'eventemitter3';\nimport web3Utils from 'web3-utils';\nimport jaysonBrowserClient from 'jayson/lib/client/browser';\nimport axios from 'axios';\nimport utils from './enigma-utils';\nimport forge from 'node-forge';\nimport JSBI from 'jsbi';\nimport retry from 'retry';\nimport * as abi from 'ethereumjs-abi';\nimport EthCrypto from 'eth-crypto';\nimport * as eeConstants from './emitterConstants';\n\n/**\n * Class encapsulation the Enigma operations.\n */\nexport default class Enigma {\n  /**\n   * The Enigma JS library constructor - a wrapper for Ethereum's Web3 library, offering additional services to\n   * leverage the Enigma protocol's unique features.\n   *\n   * @param {Web3} web3 - Web3 provider for the library\n   * @param {string} enigmaContractAddr - Address the Enigma contract is deployed to on Ethereum\n   * @param {string} tokenContractAddr - Address the Enigma token contract is deployed to on Ethereum\n   * @param {string} rpcAddr - Enigma p2p network address for RPC calls\n   * @param {Object} txDefaults\n   */\n  constructor(web3, enigmaContractAddr, tokenContractAddr, rpcAddr, txDefaults = {}, config = {}) {\n    this.web3 = web3;\n    this.txDefaults = txDefaults;\n\n    this.config = {};\n    this.config.retry = {};\n    this.config.retry.retries = config.retry ?\n      (config.retry.retries != null ? config.retry.retries : 5) : 5;\n    this.config.retry.factor = config.retry ?\n      (config.retry.factor != null ? config.retry.factor : 2) : 2;\n    this.config.retry.minTimeout = config.retry ?\n      (config.retry.minTimeout != null ? config.retry.minTimeout : 2000) : 2000;\n    this.config.retry.maxTimeout = config.retry ?\n      (config.retry.maxTimeout != null ? config.retry.maxTimeout : 'Infinity') : 'Infinity';\n    this.config.retry.randomize = config.retry ?\n      (config.retry.randomize != null ? config.retry.randomize : true) : true;\n\n    // axios callback for jayson rpc client to interface with ENG network\n    let callServer = function(request, callback) {\n      let config = {\n        headers: {\n          'Content-Type': 'application/json',\n          'credentials': 'include',\n        },\n      };\n      axios.post(rpcAddr, JSON.parse(request), config).then((response) => {\n        if (eeConstants.ERROR in response.data) {\n          callback(response.data.error, null);\n        } else {\n          let text = JSON.stringify(response.data.result);\n          callback(null, text);\n        }\n      }).catch(function(err) {\n        callback({code: -32000, message: err.message}, null);\n      });\n    };\n    this.client = jaysonBrowserClient(callServer, {});\n    this.workerParamsCache = {};\n    this.selectedWorkerGroupCache = {};\n    this.taskKeyLocalStorage = {};\n    this.createContracts(enigmaContractAddr, tokenContractAddr);\n  }\n\n  /**\n   * Initialize the worker-specific admin features\n   */\n  admin() {\n    this.admin = new Admin(this.web3, this.enigmaContract, this.tokenContract, this.txDefaults, this);\n  }\n\n  /**\n   * Initialize the Enigma and Enigma token contracts\n   *\n   * @param {string} enigmaContractAddr - Address the Enigma contract is deployed to on Ethereum\n   * @param {string} tokenContractAddr - Address the Enigma token contract is deployed to on Ethereum\n   */\n  createContracts(enigmaContractAddr, tokenContractAddr) {\n    this.enigmaContract = new this.web3.eth.Contract(EnigmaContract['abi'],\n      enigmaContractAddr, this.txDefaults);\n    this.tokenContract = new this.web3.eth.Contract(EnigmaTokenContract['abi'],\n      tokenContractAddr, this.txDefaults);\n  }\n\n  /**\n   * Create a base Task - a wrapper for a task (either contract deployments or compute tasks)\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string/Buffer} scAddrOrPreCode - Either secret contract address (string) or precode (Buffer), depending\n   * on if user is running a contract deployment or compute task\n   * @param {boolean} isContractDeploymentTask - Is this task a contract deployment task (if not, it's a compute task)\n   * @returns {EventEmitter} EventEmitter to be listened to track creation of task. Emits a Task with base attributes\n   * to be used for remainder of task lifecycle\n   */\n  createTask(fn, args, gasLimit, gasPx, sender, scAddrOrPreCode, isContractDeploymentTask) {\n    let emitter = new EventEmitter();\n    (async () => {\n      // TODO: never larger that 53-bit?\n      const nonce = parseInt(await this.enigmaContract.methods.getUserTaskDeployments(sender).call());\n      const scAddr = isContractDeploymentTask ? utils.generateScAddr(sender, nonce) : scAddrOrPreCode;\n      let preCode;\n      let preCodeGzip;\n      if (isContractDeploymentTask) {\n        if (Buffer.isBuffer(scAddrOrPreCode)) {\n          preCode = scAddrOrPreCode;\n          // gzip the preCode\n          preCodeGzip = await utils.gzip(preCode);\n        } else {\n          throw Error('PreCode expected to be a Buffer, instead got '+typeof scAddrOrPreCode);\n        }\n      } else {\n        preCode = '';\n        preCodeGzip = '';\n      }\n\n      const preCodeHash = isContractDeploymentTask ?\n        this.web3.utils.soliditySha3({t: 'bytes', value: preCode.toString('hex')}) : '';\n      const argsTranspose = (args === undefined || args.length === 0) ? [[], []] :\n        args[0].map((col, i) => args.map((row) => row[i]));\n      const abiEncodedArgs = utils.remove0x(this.web3.eth.abi.encodeParameters(argsTranspose[1], argsTranspose[0]));\n      let abiEncodedArgsArray = [];\n      for (let n = 0; n < abiEncodedArgs.length; n += 2) {\n        abiEncodedArgsArray.push(parseInt(abiEncodedArgs.substr(n, 2), 16));\n      }\n      const blockNumber = await this.web3.eth.getBlockNumber();\n      const workerParams = await this.getWorkerParams(blockNumber);\n      const firstBlockNumber = workerParams.firstBlockNumber;\n      let workerAddress = await this.selectWorkerGroup(scAddr, workerParams, 1)[0]; // TODO: tmp fix 1 worker\n      workerAddress = workerAddress.toLowerCase().slice(-40); // remove leading '0x' if present\n      const {publicKey, privateKey} = this.obtainTaskKeyPair();\n      try {\n        const getWorkerEncryptionKeyResult = await new Promise((resolve, reject) => {\n          this.client.request('getWorkerEncryptionKey',\n            {workerAddress: workerAddress, userPubKey: publicKey}, (err, response) => {\n              if (err) {\n                reject(err);\n                return;\n              }\n              resolve(response);\n            });\n        });\n        const {result, id} = getWorkerEncryptionKeyResult;\n        const {workerEncryptionKey, workerSig} = result;\n\n        // The signature of the workerEncryptionKey is generated\n        // concatenating the following elements in a bytearray:\n        // len('Enigma User Message') + b'Enigma User Message' + len(workerEncryptionKey) + workerEncryptionKey\n        // Because the first 3 elements are constant, they are hardcoded as follows:\n        // len('Enigma User Message') as a uint64 => 19 in hex => 0000000000000013\n        // bytes of 'Enigma User Message' in hex => 456e69676d612055736572204d657373616765\n        // len(workerEncryptionKey) as a unit64 => 64 in hex => 0000000000000040\n        const hexToVerify = '0x0000000000000013456e69676d612055736572204d6573736167650000000000000040' +\n          workerEncryptionKey;\n\n        // the hashing function soliditySha3 expects hex instead of bytes\n        let recAddress = EthCrypto.recover('0x'+workerSig,\n          this.web3.utils.soliditySha3({t: 'bytes', value: hexToVerify}));\n\n        recAddress = recAddress.toLowerCase().slice(-40); // remove leading '0x' if present\n\n        if (workerAddress !== recAddress) {\n          console.error('Worker address', workerAddress, '!= recovered address', recAddress);\n          emitter.emit(eeConstants.ERROR, {\n            name: 'InvalidWorker',\n            message: `Invalid worker encryption key + signature combo ${workerAddress} != ${recAddress}`,\n          });\n        } else {\n          // Generate derived key from worker's encryption key and user's private key\n          const derivedKey = utils.getDerivedKey(workerEncryptionKey, privateKey);\n          // Encrypt function and ABI-encoded args\n          const encryptedFn = utils.encryptMessage(derivedKey, fn);\n          const encryptedAbiEncodedArgs = utils.encryptMessage(derivedKey, Buffer.from(abiEncodedArgsArray));\n          const msg = this.web3.utils.soliditySha3(\n            {t: 'bytes', v: encryptedFn},\n            {t: 'bytes', v: encryptedAbiEncodedArgs},\n          );\n          const userTaskSig = await this.web3.eth.sign(msg, sender);\n          emitter.emit(eeConstants.CREATE_TASK, new Task(scAddr, encryptedFn, encryptedAbiEncodedArgs, gasLimit, gasPx,\n            id, publicKey, firstBlockNumber, workerAddress, workerEncryptionKey, sender, userTaskSig, nonce,\n            preCodeGzip.toString('base64'), preCodeHash, isContractDeploymentTask));\n        }\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create and store a task record on chain (ETH). Task records are necessary for collecting the ENG computation fee\n   * and computing the immutable taskId (a unique value for each task computed from hash(user's ETH address, user's\n   * nonce value monotonically increasing for every task deployment). Thus, task records have important implications for\n   * task ordering, fee payments, and verification.\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @returns {EventEmitter} EventEmitter to be listened to track creation of task record. Emits a Task with task\n   * record creation attributes to be used for remainder of task lifecycle\n   */\n  createTaskRecord(task) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const balance = await this.tokenContract.methods.balanceOf(task.sender).call();\n      if (balance < (task.gasLimit * task.gasPx)) {\n        emitter.emit(eeConstants.ERROR, {\n          name: 'NotEnoughTokens',\n          message: 'Not enough tokens to pay the fee',\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, task.gasLimit * task.gasPx).send({\n        from: task.sender,\n      });\n      try {\n        const receipt = task.isContractDeploymentTask ?\n          await this.enigmaContract.methods.createDeploymentTaskRecord(task.inputsHash, task.gasLimit,\n            task.gasPx, task.firstBlockNumber, task.nonce).send({\n            from: task.sender,\n          }).on('transactionHash', (hash) => {\n            task.transactionHash = hash;\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_TRANSACTION_HASH, hash);\n          }).on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_CONFIRMATION, confirmationNumber, receipt);\n          })\n          :\n          await this.enigmaContract.methods.createTaskRecord(task.inputsHash, task.gasLimit, task.gasPx,\n            task.firstBlockNumber).send({\n            from: task.sender,\n          }).on('transactionHash', (hash) => {\n            task.transactionHash = hash;\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_TRANSACTION_HASH, hash);\n          }).on('confirmation', (confirmationNumber, receipt) => {\n            emitter.emit(eeConstants.CREATE_TASK_RECORD_CONFIRMATION, confirmationNumber, receipt);\n          });\n        task.taskId = receipt.events.TaskRecordCreated.returnValues.taskId;\n        task.receipt = receipt;\n        task.ethStatus = 1;\n        task.creationBlockNumber = receipt.blockNumber;\n        emitter.emit(eeConstants.CREATE_TASK_RECORD_RECEIPT, receipt);\n        emitter.emit(eeConstants.CREATE_TASK_RECORD, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err.message);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create and store task records on chain (ETH). Task records are necessary for collecting the ENG computation fee\n   * and computing the immutable taskId (a unique value for each task computed from hash(user's ETH address, user's\n   * nonce value monotonically increasing for every task deployment). Thus, task records have important implications for\n   * task ordering, fee payments, and verification.\n   *\n   * @param {Array} tasks - Task wrappers for contract deployment and compute tasks\n   * @returns {EventEmitter} EventEmitter to be listened to track creation of task records. Emits Tasks with task\n   * record creation attributes to be used for remainder of task lifecycle\n   */\n  createTaskRecords(tasks) {\n    let emitter = new EventEmitter();\n    (async () => {\n      const inputsHashes = tasks.map((task) => task.inputsHash);\n      const gasLimits = tasks.map((task) => task.gasLimit);\n      const gasPxs = tasks.map((task) => task.gasPx);\n      const fees = tasks.map((task) => task.gasLimit * task.gasPx);\n      const balance = await this.tokenContract.methods.balanceOf(tasks[0].sender).call();\n      const totalFees = fees.reduce((a, b) => a + b, 0);\n      if (balance < totalFees) {\n        emitter.emit(eeConstants.ERROR, {\n          name: 'NotEnoughTokens',\n          message: 'Not enough tokens to pay the fee',\n        });\n        return;\n      }\n      await this.tokenContract.methods.approve(this.enigmaContract.options.address, totalFees).send({\n        from: tasks[0].sender,\n      });\n      await this.enigmaContract.methods.createTaskRecords(inputsHashes, gasLimits, gasPxs, tasks[0].firstBlockNumber).\n        send({\n          from: tasks[0].sender,\n        }).\n        on('transactionHash', (hash) => {\n          for (let i = 0; i < tasks.length; i++) {\n            tasks[i].transactionHash = hash;\n          }\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_TRANSACTION_HASH, hash);\n        }).\n        on('confirmation', (confirmationNumber, receipt) => {\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_CONFIRMATION, confirmationNumber, receipt);\n        }).\n        then((receipt) => {\n          const taskIds = receipt.events.TaskRecordsCreated.returnValues.taskIds;\n          for (let i = 0; i < tasks.length; i++) {\n            tasks[i].taskId = taskIds[i];\n            tasks[i].receipt = receipt;\n            tasks[i].ethStatus = 1;\n            tasks[i].creationBlockNumber = receipt.blockNumber;\n          }\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS_RECEIPT, receipt);\n          emitter.emit(eeConstants.CREATE_TASK_RECORDS, tasks);\n        });\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get the Task's task record status from Ethereum\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {Promise} Resolves to Task wrapper with updated ethStatus and proof properties\n   */\n  async getTaskRecordStatus(task) {\n    const result = await this.enigmaContract.methods.getTaskRecord(task.taskId).call();\n    task.ethStatus = parseInt(result.status);\n    task.proof = result.proof;\n    return task;\n  }\n\n  /**\n   * Get the Task's task record status from Ethereum\n   *\n   * @param {string} taskId - Task ID\n   * @return {Promise} Resolves to TaskRecord struct\n   */\n  async getTaskRecordFromTaskId(taskId) {\n    const taskRecord = await this.enigmaContract.methods.getTaskRecord(taskId).call();\n    return {\n      sender: taskRecord.sender,\n      inputsHash: taskRecord.inputsHash,\n      outputHash: taskRecord.outputHash,\n      gasLimit: parseInt(taskRecord.gasLimit),\n      gasPx: parseInt(taskRecord.gasPx),\n      blockNumber: parseInt(taskRecord.blockNumber),\n      status: parseInt(taskRecord.status),\n      proof: taskRecord.proof,\n    };\n  }\n\n  /**\n   * Fetch output hash for a given task\n   *\n   * @param {Task} task - Task wrapper\n   * @return {Promise} - Resolves to output hash for the task\n   */\n  async getTaskOutputHash(task) {\n    return (await this.enigmaContract.methods.getTaskRecord(task.taskId).call()).outputHash;\n  }\n\n  /**\n   * Find SGX report\n   *\n   * @param {string} custodian - Worker's address\n   * @return {Promise} Resolves to SGX report for the worker\n   */\n  async getReport(custodian) {\n    return await this.enigmaContract.methods.getReport(custodian).call();\n  }\n\n  /**\n   * Given a block number, obtain the worker parameters. These parameters remain the same for a given secret\n   * contract and epoch (fixed number of blocks). These parameters are cached until the epoch changes.\n   *\n   * @param {int} blockNumber - Block number of task record's mining\n   * @return {Promise} Resolves to the worker params, which includes a seed (random int generated from the principal\n   * node), first block number for the epoch, list of active work addresses (ordered list of worker signing addresses\n   * that were logged in at the start of the epoch), and list of active worker balances\n   */\n  async getWorkerParams(blockNumber) {\n    if ((Object.keys(this.workerParamsCache).length === 0) ||\n      (blockNumber - this.workerParamsCache.firstBlockNumber >= this.epochSize)) {\n      this.epochSize = await this.enigmaContract.methods.getEpochSize().call();\n      const getWorkerParamsResult = await this.enigmaContract.methods.getWorkerParams(blockNumber).call();\n      this.workerParamsCache = {\n        firstBlockNumber: parseInt(getWorkerParamsResult[0]),\n        seed: JSBI.BigInt(getWorkerParamsResult[1]),\n        workers: getWorkerParamsResult[2],\n        stakes: getWorkerParamsResult[3].map((x) => JSBI.BigInt(x)),\n      };\n    }\n    return this.workerParamsCache;\n  }\n\n  /**\n   * Select the workers weighted-randomly based on the staked token amount that will run the computation task\n   *\n   * @param {string} scAddr - Secret contract address\n   * @param {Object} params - Worker params (epoch first block number, seed, worker signing addresses, worker stakes)\n   * @param {number} workerGroupSize - Number of workers to be selected for task\n   * @return {Array} An array of selected workers where each selected worker is chosen with probability equal to\n   * number of staked tokens\n   */\n  selectWorkerGroup(scAddr, params, workerGroupSize = 5) {\n    // Find total number of staked tokens for workers\n    let tokenCpt = params.stakes.reduce((a, b) => JSBI.add(a, b), JSBI.BigInt(0));\n    let nonce = 0;\n    let selectedWorkers = [];\n    do {\n      // Unique hash for epoch, secret contract address, and nonce\n      const msg = abi.rawEncode(\n        ['uint256', 'bytes32', 'uint256'],\n        [params.seed.toString(10), scAddr, nonce],\n      );\n      const hash = web3Utils.keccak256(msg);\n      // Find random number between [0, tokenCpt)\n      let randVal = JSBI.remainder(JSBI.BigInt(hash), tokenCpt);\n      let selectedWorker = params.workers[params.workers.length - 1];\n      // Loop through each worker, subtracting worker's balance from the random number computed above. Once the\n      // decrementing randVal becomes negative, add the worker whose balance caused this to the list of selected\n      // workers. If worker has already been selected, increase nonce by one, resulting in a new hash computed above.\n      for (let i = 0; i < params.workers.length; i++) {\n        randVal = JSBI.subtract(randVal, params.stakes[i]);\n        if (randVal <= 0) {\n          selectedWorker = params.workers[i];\n          break;\n        }\n      }\n      if (!selectedWorkers.includes(selectedWorker)) {\n        selectedWorkers.push(selectedWorker);\n      }\n      nonce++;\n    }\n    while (selectedWorkers.length < workerGroupSize);\n    return selectedWorkers;\n  }\n\n  /**\n   * Send Task to Enigma p2p network for computation\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {EventEmitter} EventEmitter to be listened to track submission of Task to Enigma p2p network. Emits\n   * a response from the ENG network indicating whether client is ready to track the remainder of the task lifecycle\n   */\n  sendTaskInput(task) {\n    let emitter = new EventEmitter();\n    (async () => {\n      let rpcEndpointName = eeConstants.RPC_SEND_TASK_INPUT;\n      let emitName = eeConstants.SEND_TASK_INPUT_RESULT;\n      if (task.isContractDeploymentTask) {\n        rpcEndpointName = eeConstants.RPC_DEPLOY_SECRET_CONTRACT;\n        emitName = eeConstants.DEPLOY_SECRET_CONTRACT_RESULT;\n      }\n      try {\n        await new Promise((resolve, reject) => {\n          this.client.request(rpcEndpointName, Enigma.serializeTask(task), (err, response) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve(response);\n          });\n        });\n        emitter.emit(emitName, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Get task result from p2p network\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {EventEmitter} EventEmitter to be listened to track getting result from Enigma network. Emits\n   * a response from the ENG network.\n   */\n  getTaskResult(task) {\n    let emitter = new EventEmitter();\n\n    let operation = retry.operation(this.config.retry);\n    operation.attempt(async (currentAttempt)=>{\n      try {\n        const getTaskResultResult = await new Promise((resolve, reject) => {\n          this.client.request(eeConstants.RPC_GET_TASK_RESULT,\n            {taskId: utils.remove0x(task.taskId)}, (err, response) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve(response);\n          });\n        });\n        if (getTaskResultResult.result) {\n          switch (getTaskResultResult.result.status) {\n            case eeConstants.GET_TASK_RESULT_SUCCESS:\n              task.delta = getTaskResultResult.result.delta;\n              task.ethereumPayload = getTaskResultResult.result.ethereumPayload;\n              task.ethereumAddress = getTaskResultResult.result.ethereumAddress;\n              task.preCodeHash = getTaskResultResult.result.preCodeHash;\n            case eeConstants.GET_TASK_RESULT_FAILED:\n              task.encryptedAbiEncodedOutputs = getTaskResultResult.result.output;\n              task.usedGas = getTaskResultResult.result.usedGas;\n              task.workerTaskSig = getTaskResultResult.result.signature;\n            case eeConstants.GET_TASK_RESULT_UNVERIFIED:\n            case eeConstants.GET_TASK_RESULT_INPROGRESS:\n              task.engStatus = getTaskResultResult.result.status;\n              break;\n            default:\n              throw (new Error('Invalid task result status')).message;\n          }\n        } else {\n          if (operation.retry(true)) {\n            console.log('Warning: Got an empty TaskResult on attempt '+\n              currentAttempt+' of '+(this.config.retry.retries + 1)+'. Retrying...');\n            return;\n          } else {\n            task.engStatus = null;\n          }\n        }\n        emitter.emit(eeConstants.GET_TASK_RESULT_RESULT, task);\n      } catch (err) {\n        emitter.emit(eeConstants.ERROR, err);\n      }\n    });\n\n    return emitter;\n  }\n\n  /**\n   * Decrypt task result\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {Task} Task result wrapper with an updated decrypted output attribute\n   */\n  async decryptTaskResult(task) {\n    console.log('task.encryptedAbiEncodedOutputs is '+task.encryptedAbiEncodedOutputs);\n    if (task.encryptedAbiEncodedOutputs) {\n      const {privateKey} = this.obtainTaskKeyPair();\n      const derivedKey = utils.getDerivedKey(task.workerEncryptionKey, privateKey);\n      task.decryptedOutput = utils.decryptMessage(derivedKey, task.encryptedAbiEncodedOutputs);\n    } else {\n      console.log('Warning: task.encryptedAbiEncodedOutputs is empty, there is nothing to decrypt.');\n      task.decryptedOutput = null;\n    }\n    return task;\n  }\n\n  /**\n   * Verify ENG network output matches output registered on ETH\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {boolean} True/false on whether outputs match\n   */\n  async verifyTaskOutput(task) {\n    const ethOutputHash = await this.getTaskOutputHash(task);\n    const engOutputHash = this.web3.utils.soliditySha3(\n      {t: 'bytes', value: task.encryptedAbiEncodedOutputs.toString('hex')}\n    );\n    return ethOutputHash === engOutputHash;\n  }\n\n  /**\n   * Verify ENG network status matches status registered on ETH\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @return {boolean} True/false on whether statuses match\n   */\n  async verifyTaskStatus(task) {\n    const ethStatus = (await this.getTaskRecordStatus(task)).ethStatus;\n    switch (task.engStatus) {\n      case eeConstants.GET_TASK_RESULT_SUCCESS:\n        return ethStatus === eeConstants.ETH_STATUS_VERIFIED;\n        break;\n      case eeConstants.GET_TASK_RESULT_FAILED:\n        return ethStatus === eeConstants.ETH_STATUS_FAILED;\n        break;\n      case eeConstants.GET_TASK_RESULT_UNVERIFIED:\n      case eeConstants.GET_TASK_RESULT_INPROGRESS:\n        return ethStatus === eeConstants.ETH_STATUS_CREATED;\n        break;\n      default:\n        return ethStatus === eeConstants.ETH_STATUS_UNDEFINED;\n    }\n  }\n\n  /**\n   * Generator function for polling the Enigma p2p network for task status\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @param {boolean} withResult - Task wrapper for contract deployment and compute tasks\n   */\n  * pollTaskStatusGen(task, withResult) {\n    while (true) {\n      yield new Promise((resolve, reject) => {\n        this.client.request(eeConstants.RPC_GET_TASK_STATUS, {\n          taskId: utils.remove0x(task.taskId), workerAddress: task.workerAddress,\n          withResult: withResult,\n        }, (err, response) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          task.engStatus = response.result.status;\n          if (withResult) {\n            task.encryptedAbiEncodedOutputs = response.result.output;\n          }\n          resolve(task);\n        });\n      });\n    }\n  }\n\n  /**\n   * Inner poll status function that continues to poll the Enigma p2p network until the task has been verified\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @param {pollTaskStatusGen} generator - Generator function for polling Enigma p2p network for task status\n   * @param {EventEmitter} emitter - EventEmitter to track Enigma p2p network polling for Task status\n   */\n  innerPollTaskStatus(task, generator, emitter) {\n    let p = generator.next();\n    p.value.then((d) => {\n      emitter.emit(eeConstants.POLL_TASK_STATUS_RESULT, d);\n      if (d.engStatus !== 'SUCCESS' && d.engStatus !== 'FAILED') {\n        this.innerPollTaskStatus(task, generator, emitter);\n      }\n    }).catch((err) => {\n      emitter.emit(eeConstants.ERROR, err);\n    });\n  }\n\n  /**\n   * Poll the Enigma p2p network for a TaskInput's status\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @param {boolean} withResult - Task wrapper for contract deployment and compute tasks\n   * @return {EventEmitter} EventEmitter to be listened to track polling the Enigma p2p network for a Task status.\n   * Emits a Task with task result attributes\n   */\n  pollTaskStatus(task, withResult = false) {\n    let emitter = new EventEmitter();\n    let generator = this.pollTaskStatusGen(task, withResult);\n    this.innerPollTaskStatus(task, generator, emitter);\n    return emitter;\n  }\n\n  /**\n   * Poll the ETH for a Task's status\n   *\n   * @param {Task} task - Task wrapper for contract deployment and compute tasks\n   * @param {Number} interval - Polling interval in ms\n   * @return {Task} Task wrapper with updated ETH status.\n   */\n  async pollTaskETH(task, interval=1000) {\n    while (task.ethStatus === eeConstants.ETH_STATUS_CREATED) {\n      task = await this.getTaskRecordStatus(task);\n      await utils.sleep(interval);\n    }\n    return task;\n  }\n\n  /**\n   * Serialize Task for submission to the Enigma p2p network depending on whether it is a deployment or compute task\n   *\n   * @param {Task} task - Task wrapper for contract deployment or compute task\n   * @return {Object} Serialized Task for submission to the Enigma p2p network\n   */\n  static serializeTask(task) {\n    return task.isContractDeploymentTask ? {\n      preCode: task.preCode,\n      encryptedArgs: utils.remove0x(task.encryptedAbiEncodedArgs), encryptedFn: utils.remove0x(task.encryptedFn),\n      userDHKey: utils.remove0x(task.userPubKey), contractAddress: utils.remove0x(task.scAddr),\n      workerAddress: task.workerAddress,\n    } : {\n      taskId: utils.remove0x(task.taskId), workerAddress: task.workerAddress,\n      encryptedFn: utils.remove0x(task.encryptedFn), encryptedArgs: utils.remove0x(task.encryptedAbiEncodedArgs),\n      contractAddress: utils.remove0x(task.scAddr), userDHKey: utils.remove0x(task.userPubKey),\n    };\n  }\n\n  /**\n   * Obtain task key pair that has been set\n   *\n   * @return {Object} Public key-private key pair\n   */\n  obtainTaskKeyPair() {\n    // TODO: Developer tool to allow users to select their own unique passphrase to generate private key\n    const isBrowser = typeof window !== 'undefined';\n    let privateKey;\n    let encodedPrivateKey = isBrowser ? window.localStorage.getItem('encodedPrivateKey') :\n      this.taskKeyLocalStorage['encodedPrivateKey'];\n    if (encodedPrivateKey == null) {\n      throw Error('Need to set task key pair first');\n    } else {\n      privateKey = isBrowser ? atob(encodedPrivateKey) : Buffer.from(encodedPrivateKey, 'base64').toString('binary');\n    }\n    let publicKey = EthCrypto.publicKeyByPrivateKey(privateKey);\n    return {publicKey, privateKey};\n  }\n\n  /**\n   * Deterministically generate a key-secret pair necessary for deriving a shared encryption key with the selected\n   * worker. This pair will be stored in local storage for quick retrieval.\n   *\n   * @param {string} seed - Optional seed\n   * @return {string} Seed\n   */\n  setTaskKeyPair(seed='') {\n    const isBrowser = typeof window !== 'undefined';\n    if (seed === '') {\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      for (let i = 0; i < 9; i++) {\n        seed += characters.charAt(Math.floor(Math.random() * characters.length));\n      }\n    }\n    let random = forge.random.createInstance();\n    // TODO: Query user for passphrase\n    random.seedFileSync = function(needed) {\n      return forge.util.fillString(seed, needed);\n    };\n    const privateKey = forge.util.bytesToHex(random.getBytes(32));\n    isBrowser ? window.localStorage.setItem('encodedPrivateKey', btoa(privateKey)) :\n      this.taskKeyLocalStorage['encodedPrivateKey'] = Buffer.from(privateKey, 'binary').toString('base64');\n    return seed;\n  }\n\n  /**\n   * Create a task to deploy a secret contract - creates base task, creates task record, and sends task to the\n   * Enigma network. This is the most efficient and likely most common method for creating and deploying a secret\n   * contract.\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string} preCode - Precode for contract deployment\n   * @param {Number} maxRetries - Max number of retries if submitted around epoch change\n   * @return {Task} Task with attributes necessary for task record and Enigma network\n   */\n  deploySecretContract(fn, args, gasLimit, gasPx, sender, preCode, maxRetries=1) {\n    let emitter = new EventEmitter();\n    (async () => {\n      let retryCount = 0;\n      while (true) {\n        try {\n          let scTask = await new Promise((resolve, reject) => {\n            this.createTask(fn, args, gasLimit, gasPx, sender, preCode, true).\n            on(eeConstants.CREATE_TASK, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.CREATE_TASK, scTask);\n          scTask = await new Promise((resolve, reject) => {\n            this.createTaskRecord(scTask).\n            on(eeConstants.CREATE_TASK_RECORD, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.CREATE_TASK_RECORD, scTask);\n          await new Promise((resolve, reject) => {\n            this.sendTaskInput(scTask).\n            on(eeConstants.DEPLOY_SECRET_CONTRACT_RESULT, (receipt) => resolve(receipt)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.DEPLOY_SECRET_CONTRACT_RESULT, scTask);\n          break;\n        } catch (err) {\n          if ((retryCount++ >= maxRetries) ||\n            (err !== 'Returned error: VM Exception while processing transaction: revert Wrong epoch for this task')) {\n            emitter.emit(eeConstants.ERROR, err);\n            break;\n          }\n        }\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Create a compute task - creates base task, creates task record, and sends task to the Enigma network. This is the\n   * most efficient and likely most common method for creating and sending a compute task.\n   *\n   * @param {string} fn - Function name\n   * @param {Array} args - Inputs for task in the form of [[arg1, '<type>'], ..., [argn, '<type>']]\n   * @param {Number} gasLimit - ENG gas limit for task computation\n   * @param {Number} gasPx - ENG gas price for task computation\n   * @param {string} sender - ETH address for task sender\n   * @param {string} scAddr - Secret contract address\n   * @param {Number} maxRetries - Max number of retries if submitted around epoch change\n   * @return {Task} Task with attributes necessary for task record and Enigma network\n   */\n  computeTask(fn, args, gasLimit, gasPx, sender, scAddr, maxRetries=1) {\n    let emitter = new EventEmitter();\n    (async () => {\n      let retryCount = 0;\n      while (true) {\n        try {\n          let task = await new Promise((resolve, reject) => {\n            this.createTask(fn, args, gasLimit, gasPx, sender, scAddr, false).\n            on(eeConstants.CREATE_TASK, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.CREATE_TASK, task);\n          task = await new Promise((resolve, reject) => {\n            this.createTaskRecord(task).\n            on(eeConstants.CREATE_TASK_RECORD, (result) => resolve(result)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.CREATE_TASK_RECORD, task);\n          await new Promise((resolve, reject) => {\n            this.sendTaskInput(task).\n            on(eeConstants.SEND_TASK_INPUT_RESULT, (receipt) => resolve(receipt)).\n            on(eeConstants.ERROR, (error) => reject(error));\n          });\n          emitter.emit(eeConstants.SEND_TASK_INPUT_RESULT, task);\n          break;\n        } catch (err) {\n          if ((retryCount++ >= maxRetries) ||\n            (err !== 'Returned error: VM Exception while processing transaction: revert Wrong epoch for this task')) {\n            emitter.emit(eeConstants.ERROR, err);\n            break;\n          }\n        }\n      }\n    })();\n    return emitter;\n  }\n\n  /**\n   * Return the version number of the library\n   *\n   * @return {string}\n   */\n  static version() {\n    return '0.0.1';\n  }\n}\n","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n// window.Promise = Promise;\nimport utils from './enigma-utils';\nimport Enigma from './Enigma';\nimport * as eeConstants from './emitterConstants';\n\nexport {Enigma, utils, eeConstants};\n"],"sourceRoot":""}